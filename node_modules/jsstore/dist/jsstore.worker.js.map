{"version":3,"file":"jsstore.worker.js","mappings":"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","sources":["webpack://JsStoreWorker/webpack/bootstrap","webpack://JsStoreWorker/webpack/runtime/define property getters","webpack://JsStoreWorker/webpack/runtime/hasOwnProperty shorthand","webpack://JsStoreWorker/webpack/runtime/make namespace object","webpack://JsStoreWorker/./src/common/utils/promise_resolve.ts","webpack://JsStoreWorker/./src/common/utils/promise.ts","webpack://JsStoreWorker/./src/common/enums.ts","webpack://JsStoreWorker/./src/worker/model/table_meta.ts","webpack://JsStoreWorker/./src/worker/meta_helper.ts","webpack://JsStoreWorker/./src/worker/model/db_meta.ts","webpack://JsStoreWorker/./src/common/utils/for_obj.ts","webpack://JsStoreWorker/./src/worker/utils/log_helper.ts","webpack://JsStoreWorker/./src/worker/idbutil/index.ts","webpack://JsStoreWorker/./src/common/utils/promise_all.ts","webpack://JsStoreWorker/./src/worker/utils/promise_reject.ts","webpack://JsStoreWorker/./src/worker/utils/get_error.ts","webpack://JsStoreWorker/./src/worker/utils/get_error_from_exception.ts","webpack://JsStoreWorker/./src/worker/executors/base.ts","webpack://JsStoreWorker/./src/worker/utils/get_data_type.ts","webpack://JsStoreWorker/./src/worker/utils/is_null.ts","webpack://JsStoreWorker/./src/worker/executors/insert/values_checker.ts","webpack://JsStoreWorker/./src/worker/executors/update/schema_checker.ts","webpack://JsStoreWorker/./src/worker/executors/query_helper.ts","webpack://JsStoreWorker/./src/worker/executors/insert/index.ts","webpack://JsStoreWorker/./src/worker/utils/set_cross_browser_idb.ts","webpack://JsStoreWorker/./src/worker/constants/index.ts","webpack://JsStoreWorker/./src/worker/utils/is_array.ts","webpack://JsStoreWorker/./src/worker/utils/is_object.ts","webpack://JsStoreWorker/./src/worker/utils/get_keys.ts","webpack://JsStoreWorker/./src/worker/utils/get_length.ts","webpack://JsStoreWorker/./src/worker/utils/get_object_first_key.ts","webpack://JsStoreWorker/./src/worker/executors/select/base_select.ts","webpack://JsStoreWorker/./src/worker/executors/select/then_evaluator.ts","webpack://JsStoreWorker/./src/worker/executors/select/where.ts","webpack://JsStoreWorker/./src/worker/executors/select/not_where.ts","webpack://JsStoreWorker/./src/worker/utils/remove_space.ts","webpack://JsStoreWorker/./src/worker/executors/select/order_by.ts","webpack://JsStoreWorker/./src/worker/executors/select/group_by.ts","webpack://JsStoreWorker/./src/worker/utils/get_regex_from_like.ts","webpack://JsStoreWorker/./src/worker/utils/clone.ts","webpack://JsStoreWorker/./src/worker/utils/compare.ts","webpack://JsStoreWorker/./src/worker/executors/where_checker.ts","webpack://JsStoreWorker/./src/worker/executors/base_fetch.ts","webpack://JsStoreWorker/./src/worker/executors/select/regex.ts","webpack://JsStoreWorker/./src/worker/executors/select/in.ts","webpack://JsStoreWorker/./src/worker/executors/select/join.ts","webpack://JsStoreWorker/./src/worker/memory_store/index.ts","webpack://JsStoreWorker/./src/worker/executors/select/index.ts","webpack://JsStoreWorker/./src/worker/executors/count/not_where.ts","webpack://JsStoreWorker/./src/worker/executors/count/where.ts","webpack://JsStoreWorker/./src/worker/executors/count/regex.ts","webpack://JsStoreWorker/./src/worker/executors/count/in.ts","webpack://JsStoreWorker/./src/worker/executors/count/index.ts","webpack://JsStoreWorker/./src/worker/utils/resolve.ts","webpack://JsStoreWorker/./src/worker/executors/update/update_value.ts","webpack://JsStoreWorker/./src/worker/executors/update/not_where.ts","webpack://JsStoreWorker/./src/worker/executors/update/in.ts","webpack://JsStoreWorker/./src/worker/executors/update/regex.ts","webpack://JsStoreWorker/./src/worker/executors/update/where.ts","webpack://JsStoreWorker/./src/worker/executors/update/index.ts","webpack://JsStoreWorker/./src/worker/intersect/index.ts","webpack://JsStoreWorker/./src/worker/executors/drop_db.ts","webpack://JsStoreWorker/./src/worker/union/index.ts","webpack://JsStoreWorker/./src/worker/executors/remove/not_where.ts","webpack://JsStoreWorker/./src/worker/executors/remove/where.ts","webpack://JsStoreWorker/./src/worker/executors/remove/in.ts","webpack://JsStoreWorker/./src/worker/executors/remove/regex.ts","webpack://JsStoreWorker/./src/worker/executors/remove/index.ts","webpack://JsStoreWorker/./src/worker/executors/clear/index.ts","webpack://JsStoreWorker/./src/worker/executors/transaction/index.ts","webpack://JsStoreWorker/./src/worker/utils/db_schema.ts","webpack://JsStoreWorker/./src/worker/query_manager.ts","webpack://JsStoreWorker/./src/worker/index.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export const promiseResolve = (value?) => {\n    return Promise.resolve(value);\n}","export const promise = <T>(cb: (res, rej?) => any) => {\n    return new Promise<T>(cb);\n}","import { IErrorType } from \"./interfaces\";\n\nexport const ERROR_TYPE = {\n    InvalidUpdateColumn: \"invalid_update_column\",\n    UndefinedColumn: \"undefined_column\",\n    UndefinedValue: \"undefined_value\",\n    UndefinedColumnName: \"undefined_column_name\",\n    UndefinedDbName: \"undefined_database_name\",\n    UndefinedColumnValue: \"undefined_column_value\",\n    NotArray: \"not_array\",\n    NoValueSupplied: \"no_value_supplied\",\n    ColumnNotExist: \"column_not_exist\",\n    NoIndexFound: \"no_index_found\",\n    InvalidOp: \"invalid_operator\",\n    NullValue: \"null_value\",\n    WrongDataType: \"wrong_data_type\",\n    TableNotExist: \"table_not_exist\",\n    DbNotExist: \"db_not_exist\",\n    ConnectionAborted: \"connection_aborted\",\n    ConnectionClosed: \"connection_closed\",\n    NotObject: \"not_object\",\n    InvalidConfig: \"invalid_config\",\n    DbBlocked: \"Db_blocked\",\n    IndexedDbNotSupported: \"indexeddb_not_supported\",\n    NullValueInWhere: \"null_value_in_where\",\n    InvalidJoinQuery: 'invalid_join_query',\n    InvalidQuery: 'invalid_query',\n    ImportScriptsFailed: 'import_scripts_failed',\n    MethodNotExist: 'method_not_exist',\n    Unknown: \"unknown\",\n    InvalidMiddleware: \"invalid_middleware\"\n} as IErrorType;\n\nif (process.env.NODE_ENV !== 'production') {\n    Object.assign(ERROR_TYPE, {\n        InvalidOrderQuery: 'invalid_order_query',\n        InvalidGroupQuery: 'invalid_group_query'\n    });\n}\n\nexport enum WORKER_STATUS {\n    Registered = \"registerd\",\n    Failed = \"failed\",\n    NotStarted = \"not_started\"\n}\n\nexport enum DATA_TYPE {\n    String = \"string\",\n    Object = \"object\",\n    Array = \"array\",\n    Number = \"number\",\n    Boolean = \"boolean\",\n    Null = \"null\",\n    DateTime = \"date_time\"\n}\n\nexport enum API {\n    InitDb = \"init_db\",\n    Get = \"get\",\n    Set = \"set\",\n    Select = \"select\",\n    Insert = \"insert\",\n    Update = \"update\",\n    Remove = \"remove\",\n    OpenDb = \"open_db\",\n    Clear = \"clear\",\n    DropDb = \"drop_db\",\n    Count = \"count\",\n    ChangeLogStatus = \"change_log_status\",\n    Terminate = \"terminate\",\n    Transaction = \"transaction\",\n    CloseDb = \"close_db\",\n    Union = \"union\",\n    Intersect = \"intersect\",\n    ImportScripts = \"import_scripts\",\n    Middleware = \"middleware\"\n}\n\nexport enum EVENT {\n    RequestQueueEmpty = \"requestQueueEmpty\",\n    RequestQueueFilled = \"requestQueueFilled\",\n    Upgrade = \"upgrade\",\n    Create = \"create\",\n    Open = \"open\"\n}\n\nexport enum QUERY_OPTION {\n    Where = \"where\",\n    Like = 'like',\n    Regex = 'regex',\n    In = 'in',\n    Equal = \"=\",\n    Between = '-',\n    GreaterThan = '>',\n    LessThan = '<',\n    GreaterThanEqualTo = \">=\",\n    LessThanEqualTo = \"<=\",\n    NotEqualTo = \"!=\",\n    Aggregate = \"aggregate\",\n    Max = \"max\",\n    Min = \"min\",\n    Avg = \"avg\",\n    Count = \"count\",\n    Sum = \"sum\",\n    List = \"list\",\n    Or = \"or\",\n    Skip = \"skip\",\n    Limit = \"limit\",\n    And = \"and\",\n    IgnoreCase = \"ignoreCase\",\n    Then = \"then\"\n}\n\nexport enum IDB_MODE {\n    ReadOnly = \"readonly\",\n    ReadWrite = \"readwrite\"\n}\n\nexport enum OCCURENCE {\n    First = 'f',\n    Last = 'l',\n    Any = 'a'\n}\n\nexport enum CONNECTION_STATUS {\n    Connected = \"connected\",\n    Closed = \"closed\",\n    NotStarted = \"not_started\",\n    UnableToStart = \"unable_to_start\",\n    ClosedByJsStore = \"closed_by_jsstore\"\n}","import { ITable, IAlterQuery, IColumn, TColumns } from \"@/common\";\n\nexport class TableMeta {\n    name: string;\n    columns: IColumn[] = [];\n    primaryKey: string;\n    autoIncColumnValue = {};\n    alter?: IAlterQuery;\n\n    constructor(table: ITable) {\n        this.columns = this.setColumn(table.columns);\n        this.name = table.name;\n        this.alter = table.alter || {};\n    }\n\n    setColumn(tableColumns: TColumns) {\n        const columns = [];\n        for (const columnName in tableColumns) {\n            const column: IColumn = tableColumns[columnName] as any;\n            column.name = columnName;\n            if (column.autoIncrement) {\n                this.autoIncColumnValue[columnName] = 0;\n            }\n            if (column.primaryKey) {\n                this.primaryKey = columnName;\n            }\n            column.enableSearch = column.enableSearch == null ? true : column.enableSearch;\n            const existingColumnIndex = this.columns.indexOf(q => q.name === columnName);\n            if (existingColumnIndex < 0) {\n                columns.push(column);\n            }\n            else {\n                const existingColumn = this.columns[existingColumnIndex];\n                Object.assign(existingColumn, column);\n            }\n        }\n        return columns;\n    }\n\n\n}","import { IDBUtil } from \"@/worker/idbutil\";\nimport { promise } from \"@/common\";\n\nexport class MetaHelper {\n    static tableName = \"JsStore_Meta\";\n    static autoIncrementKey(tableName: string, columnName: string) {\n        return `JsStore_${tableName}_${columnName}_Value`;\n    }\n    static dbSchema = `JsStore_DbSchema`;\n\n    static set(key, value, util: IDBUtil) {\n        if (!util.tx) {\n            util.createTransaction([MetaHelper.tableName]);\n        }\n        const store = util.objectStore(MetaHelper.tableName);\n\n        return promise((res, rej) => {\n            const req = store.put({\n                key, value\n            });\n            req.onsuccess = () => {\n                res();\n            };\n            req.onerror = rej;\n        });\n    }\n\n    static get(key, util: IDBUtil) {\n        if (!util.tx) {\n            util.createTransaction([MetaHelper.tableName]);\n        }\n        const store = util.objectStore(MetaHelper.tableName);\n\n        return promise((res, rej) => {\n            const req = store.get(\n                util.keyRange(key)\n            );\n            req.onsuccess = () => {\n                const result = req.result;\n                res(result && result.value);\n            };\n            req.onerror = rej;\n        });\n    }\n\n    static remove(key, util: IDBUtil) {\n        if (!util.tx) {\n            util.createTransaction([MetaHelper.tableName]);\n        }\n        const store = util.objectStore(MetaHelper.tableName);\n\n        return promise((res, rej) => {\n            const req = store.delete(\n                util.keyRange(key)\n            );\n            req.onsuccess = res;\n            req.onerror = rej;\n        });\n    }\n}","import { IDataBase } from \"@/common\";\nimport { TableMeta } from \"./table_meta\";\nimport { MetaHelper } from \"@worker/meta_helper\";\n\nexport class DbMeta {\n    name: string;\n    version: number;\n    tables: TableMeta[];\n\n    constructor(db: IDataBase) {\n        this.name = db.name;\n        this.version = db.version || 1;\n        db.tables.push({\n            name: MetaHelper.tableName,\n            columns: {\n                key: {\n                    primaryKey: true\n                },\n                value: {\n                    enableSearch: false\n                }\n            },\n        })\n        this.tables = db.tables.map(table => {\n            return new TableMeta(table);\n        });\n    }\n}","export const forObj = (obj: object, cb: (key, value) => void) => {\n    for (const key in obj) {\n        cb(key, obj[key]);\n    }\n}","import { ERROR_TYPE, IError } from \"@/common\";\n\nexport class LogHelper implements IError {\n    type: string;\n    message: string;\n    private info_: any;\n\n    status: boolean;\n\n    log(msg) {\n        if (this.status) {\n            console.log(msg);\n        }\n    }\n\n    constructor(type: string, info?) {\n        this.type = type;\n        this.info_ = info;\n        this.message = this.getMsg_();\n    }\n\n    throw() {\n        throw this.get();\n    }\n\n\n    logError() {\n        console.error(this.get());\n    }\n\n\n\n    get() {\n        return {\n            message: this.message,\n            type: this.type\n        } as IError;\n    }\n\n    private getMsg_() {\n        let errMsg: string;\n        const info = this.info_;\n        const errorHandler = {\n            [ERROR_TYPE.NotArray]() {\n                errMsg = \"Supplied value is not an array\";\n            },\n            [ERROR_TYPE.UndefinedColumn]() {\n                errMsg = \"Column is undefined in Where\";\n            },\n            [ERROR_TYPE.UndefinedValue]() {\n                errMsg = \"Value is undefined in Where\";\n            },\n            [ERROR_TYPE.UndefinedColumnName]() {\n                errMsg = \"Column name is undefined '\" + info['TableName'] + \"'\";\n            },\n            [ERROR_TYPE.UndefinedDbName]() {\n                errMsg = \"Database name is not supplied\";\n            },\n            [ERROR_TYPE.UndefinedColumnValue]() {\n                errMsg = \"Column value is undefined\";\n            },\n            [ERROR_TYPE.NoValueSupplied]() {\n                errMsg = \"No value is supplied\";\n            },\n            [ERROR_TYPE.InvalidOp]() {\n                errMsg = \"Invalid Op Value '\" + info['Op'] + \"'\";\n            },\n            [ERROR_TYPE.ColumnNotExist]() {\n                const column = info['column'];\n                errMsg = info['isOrder'] ?\n                    (\n                        process.env.NODE_ENV !== 'production' && info.isJoin ?\n                            `Column '${column}' in order query is invalid. Please use '<table>.<column>' format for specifying a column in join query.` :\n                            `Column '${column}' in order query does not exist`\n                    ) :\n                    `Column '${column}' does not exist`;\n            },\n            [ERROR_TYPE.NoIndexFound]() {\n                errMsg = \"No index found for column '\" + info['column'] + \"'. Query can not be executed without index.\";\n            },\n            [ERROR_TYPE.NullValue]() {\n                errMsg = \"Null value is not allowed for column '\" + info['ColumnName'] + \"'\";\n            },\n            [ERROR_TYPE.WrongDataType]() {\n                errMsg = \"Supplied value for column '\" + info['column'] +\n                    \"' have wrong data type\";\n            },\n            [ERROR_TYPE.TableNotExist]() {\n                errMsg = \"Table '\" + info['tableName'] + \"' does not exist\";\n            },\n            [ERROR_TYPE.DbNotExist]() {\n                errMsg = `Database with name ${info['dbName']} does not exist`;\n            },\n            [ERROR_TYPE.NotObject]() {\n                errMsg = \"supplied value is not object\";\n            },\n            [ERROR_TYPE.InvalidOp]() {\n                errMsg = \"Invalid Config '\" + info['Config'] + \" '\";\n            },\n            [ERROR_TYPE.DbBlocked]() {\n                errMsg = `database is blocked, cant be deleted right now`;\n            },\n            [ERROR_TYPE.NullValueInWhere]() {\n                errMsg = `Null/undefined is not allowed in where. Column '${info['column']}' has null`;\n            },\n            [ERROR_TYPE.MethodNotExist]() {\n                errMsg = `method '${info}' does not exist.`;\n            },\n            [ERROR_TYPE.IndexedDbNotSupported]() {\n                errMsg = \"Browser does not support indexeddb\";\n            },\n            getInfo() {\n                errMsg = info;\n            },\n            [ERROR_TYPE.InvalidJoinQuery]() {\n                errorHandler.getInfo();\n            },\n            [ERROR_TYPE.ImportScriptsFailed]() {\n                errorHandler.getInfo();\n            },\n            [ERROR_TYPE.InvalidMiddleware]() {\n                errMsg = `No function ${info} is found.`;\n            },\n        };\n        if (process.env.NODE_ENV !== 'production') {\n            Object.assign(errorHandler, {\n                [ERROR_TYPE.InvalidOrderQuery]() {\n                    errorHandler.getInfo();\n                },\n                [ERROR_TYPE.InvalidGroupQuery]() {\n                    errorHandler.getInfo();\n                },\n            })\n        }\n        const errorType = this.type;\n        const method = errorHandler[errorType];\n        if (method) {\n            method();\n        }\n        else {\n            if (!errorType) {\n                this.type = ERROR_TYPE.Unknown\n            }\n            errMsg = this.message;\n        }\n        return errMsg;\n    }\n}","import { DbMeta, TableMeta } from \"@worker/model\";\nimport { IDB_MODE, QUERY_OPTION, promise, forObj, IColumn, IDataBase, InitDbResult } from \"@/common\";\nimport { LogHelper, userDbSchema } from \"@worker/utils\";\nimport { MetaHelper } from \"../meta_helper\";\n\n\nexport class IDBUtil {\n\n    db: DbMeta;\n\n    con: IDBDatabase;\n    tx: IDBTransaction;\n\n    logger = new LogHelper(null);\n\n    emptyTx() {\n        if (!this.tx) return;\n        this.tx.oncomplete = null;\n        this.tx.onabort = null;\n        this.tx.onerror = null;\n        this.tx = null;\n    }\n\n    createTransactionIfNotExist(tables: string[], mode?: IDB_MODE) {\n        if (!this.tx) {\n            this.createTransaction(tables, mode);\n        }\n    }\n\n    createTransaction(tables: string[], mode = IDB_MODE.ReadWrite) {\n        this.tx = this.con.transaction(tables, mode);\n        return promise((res, rej) => {\n            this.tx.oncomplete = res;\n            this.tx.onabort = res;\n            this.tx.onerror = rej;\n        });\n    }\n\n    keyRange(value, op?) {\n        let keyRange: IDBKeyRange;\n        switch (op) {\n            case QUERY_OPTION.Between: keyRange = IDBKeyRange.bound(value.low, value.high, false, false); break;\n            case QUERY_OPTION.GreaterThan: keyRange = IDBKeyRange.lowerBound(value, true); break;\n            case QUERY_OPTION.GreaterThanEqualTo: keyRange = IDBKeyRange.lowerBound(value); break;\n            case QUERY_OPTION.LessThan: keyRange = IDBKeyRange.upperBound(value, true); break;\n            case QUERY_OPTION.LessThanEqualTo: keyRange = IDBKeyRange.upperBound(value); break;\n            default: keyRange = IDBKeyRange.only(value); break;\n        }\n        return keyRange;\n    }\n\n    objectStore(name: string) {\n        return this.tx.objectStore(name);\n    }\n\n    abortTransaction() {\n        if (this.tx) {\n            this.tx.abort();\n        }\n    }\n\n    close() {\n        if (this.con) {\n            this.con.close();\n        }\n        // wait for 100 ms before success\n        return promise(res => {\n            this.con = null;\n            setTimeout(res, 100);\n        });\n    }\n\n    initDb(db: DbMeta) {\n        let isDbCreated = false;\n        const dbVersion = db.version;\n        let oldVersion;\n        const initLogic = (res, rej) => {\n            const dbOpenRequest = indexedDB.open(db.name, dbVersion);\n            dbOpenRequest.onsuccess = () => {\n                this.con = dbOpenRequest.result;\n                this.con.onversionchange = (e: any) => {\n                    // if (e.newVersion === null) { // An attempt is made to delete the db\n                    e.target.close(); // Manually close our connection to the db\n                    // }\n                }\n\n                res({\n                    isCreated: isDbCreated,\n                    oldVersion: oldVersion,\n                    newVersion: dbVersion\n                } as InitDbResult);\n            }\n\n            dbOpenRequest.onerror = (e) => {\n                console.error(\"error\", e);\n                rej(e);\n            };\n\n            dbOpenRequest.onupgradeneeded = (e: IDBVersionChangeEvent) => {\n                oldVersion = e.oldVersion;\n                const target: {\n                    result: IDBDatabase,\n                    transaction: IDBTransaction\n                } = (e as any).target\n                const upgradeConnection = target.result;\n                isDbCreated = true;\n                const transaction = target.transaction;\n                const storeNames = upgradeConnection.objectStoreNames;\n                const createObjectStore = (table: TableMeta) => {\n                    const option: IDBObjectStoreParameters = table.primaryKey ? {\n                        keyPath: table.primaryKey\n                    } : {\n                            autoIncrement: true\n                        }\n\n                    const store = upgradeConnection.createObjectStore(table.name, option);\n                    table.columns.forEach(column => {\n                        addColumn(store, column)\n                    });\n                }\n                const addColumn = (store: IDBObjectStore, column: IColumn) => {\n                    const columnName = column.name;\n                    if (column.enableSearch && !store.indexNames.contains(columnName)) {\n                        const options = column.primaryKey ? { unique: true } : { unique: column.unique };\n                        options['multiEntry'] = column.multiEntry;\n                        const keyPath = column.keyPath == null ? columnName : column.keyPath;\n                        store.createIndex(columnName, keyPath, options);\n                    }\n                }\n                const deleteColumn = (store: IDBObjectStore, table: TableMeta, columnName: string) => {\n                    const index = table.columns.findIndex(q => q.name === columnName);\n                    if (index >= 0) {\n                        table.columns.splice(index, 1);\n                        store.deleteIndex(columnName);\n                    }\n                }\n                db.tables.forEach(table => {\n                    if (!storeNames.contains(table.name)) {\n                        return createObjectStore(table);\n                    }\n                    const store = transaction.objectStore(table.name);\n                    for (let i = oldVersion + 1; i <= dbVersion; i++) {\n                        const alterQuery = table.alter[i];\n                        if (alterQuery) {\n                            if (alterQuery.add) {\n                                const newColumns = table.setColumn(alterQuery.add);\n                                newColumns.forEach(column => {\n                                    addColumn(store, column);\n                                    table.columns.push(column);\n                                })\n                            }\n                            forObj(\n                                alterQuery.drop || {}, ((columnName) => {\n                                    deleteColumn(store, table, columnName);\n                                })\n                            )\n                            forObj(\n                                alterQuery.modify || {}, ((columnName, column: IColumn) => {\n                                    const shouldDelete = column.multiEntry || column.keyPath || column.unique;\n                                    let targetColumn = table.columns.find(q => q.name === columnName);\n                                    const newColumn = Object.assign(targetColumn, column);\n                                    newColumn.name = columnName;\n                                    if (shouldDelete) {\n                                        deleteColumn(store, table, columnName);\n                                        addColumn(store, newColumn);\n                                        table.columns.push(newColumn);\n                                    }\n                                })\n                            )\n                        }\n                    }\n                });\n\n                for (let i = 0, length = storeNames.length; i < length; i++) {\n                    const storeName = storeNames.item(i);\n                    const tableIndex = db.tables.findIndex(qry => qry.name === storeName);\n                    if (tableIndex < 0) {\n                        upgradeConnection.deleteObjectStore(storeName);\n                    }\n                }\n\n            }\n        }\n        return promise<InitDbResult>(initLogic)\n    }\n}","export const promiseAll = <T>(promises: any) => {\n    return Promise.all<T>(promises);\n};","export const promiseReject = (value) => {\n    return Promise.reject(value);\n}","import { LogHelper } from \"./log_helper\";\n\nexport const getError = (e) => {\n    const customError = e instanceof LogHelper;\n    if (customError) {\n        e.logError();\n        return (e as LogHelper).get();\n    }\n    else {\n        let error;\n        if (e.name) {\n            error = new LogHelper(e.name);\n            error.message = e.message;\n        }\n        else {\n            error = new LogHelper((e as any).target.error.name);\n            error.message = (e as any).target.error.message;\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            error.logError();\n        }\n        return error.get();\n    }\n}","import { ERROR_TYPE } from \"@/common\"\nimport { getError } from \"./get_error\";\n\nexport const getErrorFromException = (ex, type = ERROR_TYPE.InvalidQuery) => {\n    ex.name = type;\n    return getError(ex);\n}","import { IDBUtil } from \"@worker/idbutil\";\nimport { IInsertQuery, ISelectQuery, IUpdateQuery } from \"@/common\";\nimport { promiseReject, getErrorFromException } from \"@worker/utils\";\n\nexport class Base {\n\n    get db() {\n        return this.util.db;\n    }\n\n    util: IDBUtil;\n    query: IInsertQuery | ISelectQuery | IUpdateQuery;\n\n    rowAffected = 0;\n    isTxQuery = false;\n    objectStore: IDBObjectStore;\n    tableName: string;\n\n    protected results: any[] = [];\n\n    table(name?: string) {\n        const tableName = name || this.tableName;\n        return this.db.tables.find(q => q.name === tableName)\n    }\n\n    primaryKey(tableName?: string) {\n        const query = this.query as ISelectQuery;\n        if (!query.from && query.store && query.meta) {\n            const primaryKey = query.meta.primaryKey;\n            if (process.env.NODE_ENV !== 'production') {\n                if (primaryKey == null) {\n                    delete query.store;\n                    console.warn(`no primary key found for query - ${JSON.stringify(this.query)}`);\n                }\n            }\n            return primaryKey;\n        }\n        const table = this.table(tableName);\n        if (process.env.NODE_ENV !== 'production') {\n            if (table == null && query.store) {\n                delete query.store;\n                const metaValue = query.meta;\n                if (!metaValue || !metaValue.primaryKey) {\n                    console.warn(`no primary key found for query - ${JSON.stringify(this.query)}. Please supply primary key in meta field.`);\n                }\n            }\n        }\n        return table.primaryKey;\n    }\n\n\n    protected getColumnInfo(columnName: string, tableName?: string) {\n        return this.table(tableName).columns.find(column => column.name === columnName);\n    }\n\n\n\n    onException(ex: DOMException, type?) {\n        console.error(ex);\n        this.util.abortTransaction();\n        return promiseReject(\n            getErrorFromException(ex, type)\n        );\n    }\n}","import { DATA_TYPE } from \"@/common\";\n\nexport const getDataType = (value) => {\n    if (value == null) {\n        return DATA_TYPE.Null;\n    }\n    const type = typeof value;\n    switch (type) {\n        case 'object':\n            if (Array.isArray(value)) {\n                return DATA_TYPE.Array;\n            }\n            if (value instanceof Date) {\n                return DATA_TYPE.DateTime;\n            }\n    }\n    return type;\n}","export const isNull = (value) => {\n    if (value == null) {\n        return true;\n    } else {\n        switch (typeof value) {\n            // case 'string': return value.length === 0;\n            case 'number': return isNaN(value);\n        }\n    }\n    return false;\n};","import { TableMeta } from \"@/worker/model/table_meta\";\nimport { IColumn, TStringAny, ERROR_TYPE, DATA_TYPE, IInsertQuery } from \"@/common\";\nimport { getDataType, LogHelper, isNull } from \"@/worker/utils\";\n\n\nexport class ValuesChecker {\n    table: TableMeta;\n    autoIncrementValue;\n    query: IInsertQuery;\n\n    constructor(table: TableMeta, autoIncValues) {\n        this.table = table;\n        this.autoIncrementValue = autoIncValues;\n    }\n\n    checkAndModifyValues(query: IInsertQuery) {\n        let err: LogHelper;\n        this.query = query;\n        const values = query.values;\n        const ignoreIndexes = [];\n        values.every((item, index) => {\n            err = this.checkAndModifyValue(item);\n            if (query.ignore && err) {\n                ignoreIndexes.push(index);\n                err = null;\n            }\n            return err ? false : true;\n        });\n        ignoreIndexes.forEach(index => {\n            values.splice(index, 1);\n        });\n        return { err, values };\n    }\n\n    private checkAndModifyValue(value) {\n        let error: LogHelper;\n        this.table.columns.every(column => {\n            error = this.checkAndModifyColumnValue_(column, value);\n            return error ? false : true;\n        })\n        return error;\n    }\n\n    private checkNotNullAndDataType_(column: IColumn, value: TStringAny) {\n        // check not null schema\n        if (column.notNull && isNull(value[column.name])) {\n            return this.getError(ERROR_TYPE.NullValue, { ColumnName: column.name });\n        }\n        // check datatype\n        else if (column.dataType && !isNull(value[column.name]) &&\n            getDataType(value[column.name]) !== column.dataType) {\n            return this.getError(ERROR_TYPE.WrongDataType, { column: column.name });\n        }\n    }\n\n    private checkAndModifyColumnValue_(column: IColumn, value: TStringAny) {\n        const columnValue = value[column.name];\n        // check auto increment scheme\n        if (column.autoIncrement) {\n            // if value is null, then create the autoincrement value\n            if (isNull(columnValue)) {\n                value[column.name] = ++this.autoIncrementValue[column.name];\n            }\n            else {\n                if (getDataType(columnValue) === DATA_TYPE.Number) {\n                    // if column value is greater than autoincrement value saved, then make the\n                    // column value as autoIncrement value\n                    if (columnValue > this.autoIncrementValue[column.name]) {\n                        this.autoIncrementValue[column.name] = columnValue;\n                    }\n                }\n            }\n        }\n        // check Default Schema\n        else if (column.default !== undefined && isNull(columnValue)) {\n            value[column.name] = column.default;\n        }\n        const query = this.query;\n        if (query.validation) {\n            return this.checkNotNullAndDataType_(column, value);\n        }\n    }\n\n    private getError(error: string, details: object) {\n        return new LogHelper(error, details);\n    }\n}","import { IColumn, DATA_TYPE, ERROR_TYPE } from \"@/common\";\nimport { LogHelper, isNull, getDataType } from \"@worker/utils\";\nimport { TableMeta } from \"@worker/model\";\n\nexport class SchemaChecker {\n    table: TableMeta;\n    constructor(table: TableMeta) {\n        this.table = table;\n    }\n\n    check(setValue: object, tblName: string) {\n        let log: LogHelper;\n        if (typeof setValue === DATA_TYPE.Object) {\n            if (this.table) {\n                // loop through table column and find data is valid\n                this.table.columns.every((column) => {\n                    if (column.name in setValue) {\n                        log = this.checkByColumn_(column, setValue[column.name]);\n                    }\n                    return log ? false : true;\n                });\n            }\n            else {\n                log = new LogHelper(ERROR_TYPE.TableNotExist, { tableName: tblName });\n            }\n        }\n        else {\n            log = new LogHelper(ERROR_TYPE.NotObject);\n        }\n        return log;\n    }\n\n\n\n    private checkByColumn_(column: IColumn, value) {\n        // check not null schema\n        if (column.notNull === true && isNull(value)) {\n            return new LogHelper(ERROR_TYPE.NullValue, { ColumnName: column.name });\n        }\n\n        // check datatype\n        const type = getDataType(value);\n        const checkFurther = value != null;\n        if (column.dataType && checkFurther) {\n            if (type !== column.dataType && type !== 'object') {\n                return new LogHelper(ERROR_TYPE.WrongDataType, { column: column.name });\n            }\n        }\n\n        // check allowed operators\n        if (checkFurther && type === 'object') {\n            const allowedOp = ['+', '-', '*', '/', '{push}'];\n            for (const prop in value) {\n                if (allowedOp.indexOf(prop) < 0 && column.dataType && type !== column.dataType) {\n                    return new LogHelper(ERROR_TYPE.WrongDataType, { column: column.name });\n                }\n            }\n        }\n    }\n}","import { IInsertQuery, DATA_TYPE, ERROR_TYPE, ISelectQuery, QUERY_OPTION, IUpdateQuery, API } from \"@/common\";\nimport { LogHelper, getDataType } from \"@/worker/utils\";\nimport { DbMeta } from \"../model\";\nimport { ValuesChecker } from \"@worker/executors/insert\";\nimport { SchemaChecker } from \"./update/schema_checker\";\n\nexport class QueryHelper {\n    db: DbMeta;\n\n    constructor(dbSchema: DbMeta) {\n        this.db = dbSchema;\n    }\n\n    validate(api: API, query: IInsertQuery | ISelectQuery | IUpdateQuery) {\n        switch (api) {\n            case API.Select:\n            case API.Remove:\n            case API.Count:\n                return this.checkSelect(query as ISelectQuery);\n            case API.Insert:\n                return this.checkInsertQuery(query as IInsertQuery);\n            case API.Update:\n                return this.checkUpdate(query as IUpdateQuery);\n        }\n    }\n\n    private getTable_(tableName: string) {\n        return this.db.tables.find(q => q.name === tableName);\n    }\n\n    isInsertQryValid(query: IInsertQuery) {\n        const table = this.getTable_(query.into);\n        let log: LogHelper;\n        if (table) {\n            switch (getDataType(query.values)) {\n                case DATA_TYPE.Array:\n                    break;\n                case DATA_TYPE.Null:\n                    log = new LogHelper(ERROR_TYPE.NoValueSupplied);\n                    break;\n                default:\n                    log = new LogHelper(ERROR_TYPE.NotArray);\n            }\n        }\n        else {\n            log = new LogHelper(ERROR_TYPE.TableNotExist, { tableName: query.into });\n        }\n        return {\n            table, log\n        };\n    }\n\n    private checkUpdate(query: IUpdateQuery) {\n        let err = new SchemaChecker(this.getTable_(query.in)).\n            check(query.set, query.in);\n        if (err) return err;\n        if (query.where != null) {\n            err = this.checkForNullInWhere_(query);\n            if (err) return err;\n            this.addGreatAndLessToNotOp_(query as any);\n        }\n    }\n\n    private checkSelect(query: ISelectQuery) {\n        if (!query.store) {\n            const table = this.getTable_(query.from);\n            if (!table) {\n                return new LogHelper(ERROR_TYPE.TableNotExist,\n                    { tableName: query.from }\n                );\n            }\n        }\n\n        if (query.where) {\n            const err = this.checkForNullInWhere_(query);\n            if (err) return err;\n            this.addGreatAndLessToNotOp_(query);\n        }\n    }\n\n    private checkForNullInWhere_(query): LogHelper {\n        for (const columnName in query.where) {\n            if (query.where[columnName] == null) {\n                return new LogHelper(ERROR_TYPE.NullValueInWhere, { column: columnName });\n            }\n        }\n    }\n\n    private addGreatAndLessToNotOp_(query: ISelectQuery) {\n        const whereQuery = query.where;\n        const containsNot = (qry: object, keys: string[]) => {\n            return keys.findIndex(key => qry[key][QUERY_OPTION.NotEqualTo] != null) >= 0;\n        };\n        const addToSingleQry = (qry, keys: string[]) => {\n            let value;\n            keys.forEach((prop) => {\n                value = qry[prop];\n                if (value[QUERY_OPTION.NotEqualTo] != null) {\n                    qry[prop][QUERY_OPTION.GreaterThan] = value[QUERY_OPTION.NotEqualTo];\n                    if (qry[QUERY_OPTION.Or] === undefined) {\n                        qry[QUERY_OPTION.Or] = {};\n                        qry[QUERY_OPTION.Or][prop] = {};\n                    }\n                    else if (qry[QUERY_OPTION.Or][prop] === undefined) {\n                        qry[QUERY_OPTION.Or][prop] = {};\n                    }\n                    qry[QUERY_OPTION.Or][prop][QUERY_OPTION.LessThan] = value[QUERY_OPTION.NotEqualTo];\n                    delete qry[prop][QUERY_OPTION.NotEqualTo];\n                }\n            });\n            return qry;\n        };\n        switch (getDataType(whereQuery)) {\n            case DATA_TYPE.Object:\n                const queryKeys = Object.keys(whereQuery);\n                if (containsNot(whereQuery, queryKeys)) {\n                    if (queryKeys.length === 1) {\n                        query.where = addToSingleQry(whereQuery, queryKeys);\n                    }\n                    else {\n                        const whereTmpQry = [];\n                        queryKeys.forEach((prop) => {\n                            whereTmpQry.push(addToSingleQry({ [prop]: whereQuery[prop] }, [prop]));\n                        });\n                        query.where = whereTmpQry;\n                    }\n                }\n                break;\n            default:\n                const whereTmp = [];\n                (whereQuery as object[]).forEach(qry => {\n                    const qryKeys = Object.keys(qry);\n                    if (containsNot(qry, qryKeys)) {\n                        qry = addToSingleQry(qry, qryKeys);\n                    }\n                    whereTmp.push(qry);\n                });\n                query.where = whereTmp;\n        }\n    }\n\n    private checkInsertQuery(query: IInsertQuery) {\n        const validResult = this.isInsertQryValid(query);\n        let table = validResult.table;\n        const error = validResult.log;\n        if (error) return error;\n        if (query.skipDataCheck) return;\n        const valueCheckerInstance = new ValuesChecker(table, table.autoIncColumnValue);\n        const { values, err } = valueCheckerInstance.checkAndModifyValues(query);\n        query.values = values;\n        return err;\n    }\n}","export * from \"./values_checker\";\nimport { IInsertQuery, promise, promiseAll, API, IDB_MODE } from \"@/common\";\nimport { Base } from \"@worker/executors/base\";\nimport { IDBUtil } from \"@/worker/idbutil\";\nimport { QueryHelper } from \"@worker/executors/query_helper\";\nimport { DbMeta } from \"@/worker/model\";\nimport { promiseReject } from \"@/worker/utils\";\nimport { MetaHelper } from \"@/worker/meta_helper\";\n\nexport class Insert extends Base {\n\n    query: IInsertQuery;\n\n    private valuesAffected_ = [];\n\n    constructor(query: IInsertQuery, util: IDBUtil) {\n        super();\n        if (query.validation == null) {\n            query.validation = true;\n        }\n        this.query = query;\n        this.util = util;\n        this.tableName = query.into;\n    }\n\n    execute(beforeInsert: () => Promise<any>) {\n        const db = this.db;\n        const err = new QueryHelper(db).validate(API.Insert, this.query);\n        if (err) return promiseReject(err);\n\n        return beforeInsert().then(_ => {\n            return this.insertData_(db).then(_ => {\n                return this.query.return ? this.valuesAffected_ : this.rowAffected\n            })\n        }).catch(err => {\n            this.util.abortTransaction();\n            return promiseReject(err);\n        })\n    }\n\n    private insertData_(db: DbMeta) {\n\n        let onInsertData;\n        let addMethod;\n\n        const query = this.query;\n        if (query.return) {\n            onInsertData = (value) => {\n                this.valuesAffected_.push(value);\n            };\n\n        }\n        else {\n            onInsertData = (value) => {\n                ++this.rowAffected;\n            };\n        }\n        addMethod = (() => {\n            const idbMethod = query.upsert ? \"put\" : \"add\";\n            if (query.ignore && !this.isTxQuery) {\n                return (value) => {\n                    const tx = this.util.con.transaction(query.into, IDB_MODE.ReadWrite);\n                    const objectStore = tx.objectStore(query.into);\n                    return objectStore[idbMethod](value);\n                };\n            }\n            if (!this.isTxQuery) {\n                this.util.createTransaction(\n                    [query.into, MetaHelper.tableName],\n                )\n            }\n            this.objectStore = this.util.objectStore(this.tableName);\n            return (value) => {\n                return this.objectStore[idbMethod](value);\n            };\n        })();\n\n        return promiseAll(\n            query.values.map((value) => {\n                return promise((res, rej) => {\n                    const addResult = addMethod(value);\n                    addResult.onerror = (err) => {\n                        if (query.ignore) {\n                            res();\n                        } else {\n                            rej(err);\n                        }\n                    }\n                    addResult.onsuccess = function () {\n                        onInsertData(value);\n                        res();\n                    };\n                });\n            })\n        ).then(() => {\n            MetaHelper.set(MetaHelper.dbSchema, db, this.util);\n        });\n    }\n}","export const setCrossBrowserIndexedDb = () => {\n    try {\n        if (!indexedDB) {\n            indexedDB = (self as any).mozIndexedDB ||\n                (self as any).webkitIndexedDB || (self as any).msIndexedDB;\n        }\n        if (indexedDB) {\n            IDBTransaction = IDBTransaction ||\n                (self as any).webkitIDBTransaction || (self as any).msIDBTransaction;\n            (self as any).IDBKeyRange = (self as any).IDBKeyRange ||\n                (self as any).webkitIDBKeyRange || (self as any).msIDBKeyRange;\n        }\n        else {\n            return false;\n        }\n    } catch (ex) {\n        return false;\n    }\n    return true;\n};","import { setCrossBrowserIndexedDb } from \"@worker/utils\";\n\nexport const IS_WORKER = typeof (self as any).alert === 'undefined' && typeof ServiceWorkerGlobalScope === 'undefined';\nexport const IS_IDB_SUPPORTED = setCrossBrowserIndexedDb();","export const isArray = (value) => {\n    return Array.isArray(value);\n};","export const isObject = (value) => {\n    return typeof value === 'object';\n};","export const getKeys = (value) => {\n    return Object.keys(value);\n};","import { getKeys } from \"./get_keys\"\n\nexport const getLength = (value): Number => {\n    return getKeys(value).length;\n}","export const getObjectFirstKey = (value) => {\n    for (const key in value) {\n        return key;\n    }\n};","import { Select } from \"./index\";\n\nexport const setPushResult = function (this: Select) {\n    const caseQuery = this.query.case;\n    if (caseQuery) {\n        this.pushResult = (value) => {\n            let columnName: string;\n            this.thenEvaluator.setCaseAndValue(caseQuery, value);\n            for (columnName in caseQuery) {\n                value[columnName] = this.thenEvaluator.setColumn(columnName).evaluate();\n            }\n            this.results.push(value);\n        };\n    }\n    else {\n        this.pushResult = (value) => {\n            this.results.push(value);\n        };\n    }\n}\n\nexport const setLimitAndSkipEvaluationAtEnd = function (this: Select) {\n    if (this.query.limit) {\n        this.limitAtEnd = true;\n    }\n    if (this.query.skip) {\n        this.skipAtEnd = true;\n    }\n}\n\nexport const removeDuplicates = function (this: Select) {\n    let datas = this.results;\n    const key = this.primaryKey();\n    const lookupObject = new Map();\n    for (let i = 0, len = datas.length; i < len; i++) {\n        lookupObject.set(datas[i][key], datas[i]);\n    }\n\n    this.results = Array.from(lookupObject.values());\n}","import { ICaseOption, QUERY_OPTION } from \"@/common\";\n\nexport class ThenEvaluator {\n    private columnName_: string;\n    private value;\n    private caseQuery_: { [columnName: string]: [ICaseOption] };\n    private caseColumnQuery_: ICaseOption[];\n    private length_: number;\n\n    setCaseAndValue(caseQuery: any, value) {\n        this.caseQuery_ = caseQuery;\n        this.setValue(value);\n    }\n\n    setCaseAndColumn(caseQuery: { [columnName: string]: [ICaseOption] }, columnName: string) {\n        this.caseQuery_ = caseQuery;\n        this.setColumn(columnName);\n        return this;\n    }\n\n    setColumn(columnName: string) {\n        this.columnName_ = columnName;\n        this.caseColumnQuery_ = this.caseQuery_[this.columnName_];\n        this.length_ = this.caseColumnQuery_.length;\n        return this;\n    }\n\n    setValue(value) {\n        this.value = value;\n        return this;\n    }\n\n    evaluate() {\n        for (let i = 0; i < this.length_; i++) {\n            if (this.checkCase_(this.caseColumnQuery_[i]) === true) {\n                return this.caseColumnQuery_[i].then;\n            }\n        }\n        const lastThen = this.caseColumnQuery_[this.length_ - 1].then;\n        return lastThen == null ? this.value[this.columnName_] : lastThen;\n    }\n\n    private checkCase_(cond: ICaseOption) {\n        let queryOption;\n        for (queryOption in cond) {\n            switch (queryOption) {\n                case QUERY_OPTION.GreaterThan:\n                    if (this.value[this.columnName_] > cond[queryOption]) {\n                        return true;\n                    } break;\n                case QUERY_OPTION.Equal:\n                    if (this.value[this.columnName_] === cond[queryOption]) {\n                        return true;\n                    } break;\n                case QUERY_OPTION.LessThan:\n                    if (this.value[this.columnName_] < cond[queryOption]) {\n                        return true;\n                    } break;\n                case QUERY_OPTION.GreaterThanEqualTo:\n                    if (this.value[this.columnName_] >= cond[queryOption]) {\n                        return true;\n                    } break;\n                case QUERY_OPTION.LessThanEqualTo:\n                    if (this.value[this.columnName_] <= cond[queryOption]) {\n                        return true;\n                    } break;\n                case QUERY_OPTION.NotEqualTo:\n                    if (this.value[this.columnName_] !== cond[queryOption]) {\n                        return true;\n                    } break;\n                case QUERY_OPTION.Between:\n                    if (this.value[this.columnName_] > cond[queryOption].low && this.value[this.columnName_] < cond[queryOption].high) {\n                        return true;\n                    } break;\n            }\n            return false;\n        }\n    }\n}","import { Select } from \"./\";\nimport { promise } from \"@/common\";\nimport { BaseFetch } from \"../base_fetch\";\n\nexport const getCursorOnSuccess = function (this: Select, simpleFn, limitFn, skipFn, skipAndLimitFn) {\n    if (this.limitAtEnd === false && this.skipAtEnd === false) {\n        if (this.skipRecord) {\n            return this.limitRecord ? skipAndLimitFn : skipFn\n        }\n        if (this.limitRecord) {\n            return limitFn;\n        }\n    }\n    return simpleFn;\n}\n\nexport const executeWhereLogic = function (this: BaseFetch, column, value, op, dir) {\n\n    value = op ? value[op] : value;\n    const cursorRequest = this.objectStore.index(column).openCursor(\n        this.util.keyRange(value, op),\n        dir\n    );\n\n    const onSuccess = getCursorOnSuccess.call(\n        this,\n        executeSimpleForWhere_,\n        executeLimitForWhere_,\n        executeSkipForWhere_,\n        executeSkipAndLimitForWhere_\n    );\n\n    return promise<any>((res, rej) => {\n        cursorRequest.onerror = rej;\n        cursorRequest.onsuccess = onSuccess.call(this, res);\n    })\n\n}\n\nconst executeSkipAndLimitForWhere_ = function (this: Select, onFinish) {\n    let recordSkipped = false;\n    return (e: any) => {\n        const cursor: IDBCursorWithValue = e.target.result;\n        if (cursor) {\n            if (recordSkipped && this.results.length !== this.limitRecord) {\n                if (this.shouldAddValue(cursor)) {\n                    this.pushResult(cursor.value);\n                }\n                cursor.continue();\n            }\n            else {\n                recordSkipped = true;\n                cursor.advance(this.skipRecord);\n            }\n        }\n        else {\n            onFinish();\n        }\n    };\n}\n\nconst executeSkipForWhere_ = function (this: Select, onFinish) {\n    let recordSkipped = false;\n    return (e: any) => {\n        const cursor = e.target.result;\n        if (cursor) {\n            if (recordSkipped) {\n                if (this.shouldAddValue(cursor)) {\n                    this.pushResult(cursor.value);\n                }\n                cursor.continue();\n            }\n            else {\n                recordSkipped = true;\n                cursor.advance(this.skipRecord);\n            }\n        }\n        else {\n            onFinish();\n        }\n    };\n}\n\nexport const executeLimitForWhere_ = function (this: Select, onFinish) {\n    return (e: any) => {\n        const cursor = e.target.result;\n        if (cursor && this.results.length !== this.limitRecord) {\n            if (this.shouldAddValue(cursor)) {\n                this.pushResult(cursor.value);\n            }\n            cursor.continue();\n        }\n        else {\n            onFinish();\n        }\n    };\n\n}\n\nexport const executeSimpleForWhere_ = function (this: Select, onFinish) {\n    return (e: any) => {\n        const cursor: IDBCursorWithValue = e.target.result;\n        if (cursor) {\n            if (this.shouldAddValue(cursor)) {\n                this.pushResult(cursor.value);\n            }\n            cursor.continue();\n        }\n        else {\n            onFinish();\n        }\n    };\n}","import { Select } from \"./index\";\nimport { LogHelper, promiseReject } from \"@/worker/utils\";\nimport { ERROR_TYPE, IOrderQuery, promise, promiseResolve } from \"@/common\";\nimport { getCursorOnSuccess } from \"./where\";\n\nexport const executeWhereUndefinedLogic = function (this: Select) {\n    let cursorRequest: IDBRequest;\n    const query = this.query;\n    const store = query.store;\n    if (store) {\n        this.results = store as any[];\n        this.setLimitAndSkipEvaluationAtEnd_();\n        return promiseResolve();\n    }\n    const orderQuery = query.order;\n    const objectStore = this.objectStore;\n    if (orderQuery && (orderQuery as IOrderQuery).idbSorting !== false && (orderQuery as IOrderQuery).by) {\n        if (objectStore.indexNames.contains((orderQuery as IOrderQuery).by as string)) {\n            const orderType: IDBCursorDirection = (orderQuery as IOrderQuery).type &&\n                (orderQuery as IOrderQuery).type.toLowerCase() === 'desc' ? 'prev' : 'next';\n            this.sorted = true;\n            cursorRequest = objectStore.index((orderQuery as IOrderQuery).by as string).\n                openCursor(null, orderType);\n        }\n        else {\n            return promiseReject(\n                new LogHelper(\n                    ERROR_TYPE.ColumnNotExist,\n                    { column: (orderQuery as IOrderQuery).by, isOrder: true }\n                )\n            );\n        }\n    }\n    else {\n        cursorRequest = objectStore.openCursor();\n    }\n\n    const onSuccess = getCursorOnSuccess.call(\n        this,\n        executeSimple,\n        executeLimit,\n        executeSkip,\n        executeSkipAndLimit\n    );\n\n    return promise<void>((res, rej) => {\n        cursorRequest.onerror = rej;\n        cursorRequest.onsuccess = onSuccess.call(this, res);\n    });\n}\n\nconst executeSkipAndLimit = function (this: Select, onFinished) {\n    let recordSkipped = false,\n        cursor: IDBCursorWithValue;\n    return (e) => {\n        cursor = (e as any).target.result;\n        if (cursor) {\n            if (recordSkipped && this.results.length !== this.limitRecord) {\n                this.pushResult(cursor.value);\n                cursor.continue();\n            }\n            else {\n                recordSkipped = true;\n                cursor.advance(this.skipRecord);\n            }\n        } else {\n            onFinished();\n        }\n    };\n}\n\nconst executeSkip = function (this: Select, onFinished) {\n    let recordSkipped = false,\n        cursor;\n    return (e: any) => {\n        cursor = e.target.result;\n        if (cursor) {\n            if (recordSkipped) {\n                this.pushResult(cursor.value);\n                cursor.continue();\n            }\n            else {\n                recordSkipped = true;\n                cursor.advance(this.skipRecord);\n            }\n        } else {\n            onFinished();\n        }\n    };\n}\n\nconst executeSimple = function (this: Select, onFinished) {\n    let cursor;\n    return (e: any) => {\n        cursor = e.target.result;\n        if (cursor) {\n            this.pushResult(cursor.value);\n            (cursor as any).continue();\n        }\n        else {\n            onFinished();\n        }\n    };\n}\n\nconst executeLimit = function (this: Select, onFinished) {\n    let cursor;\n    return (e: any) => {\n        cursor = e.target.result;\n        if (cursor && this.results.length !== this.limitRecord) {\n            this.pushResult(cursor.value);\n            cursor.continue();\n        } else {\n            onFinished();\n        }\n    };\n}\n","export const removeSpace = (value: string) => {\n    return value.replace(/\\s/g, '');\n};","import { Select } from \"./\";\nimport { removeSpace, getDataType, LogHelper } from \"@/worker/utils\";\nimport { ERROR_TYPE, DATA_TYPE, ICaseOption, IColumn, IOrderQuery } from \"@/common\";\n\nexport const processGroupDistinctAggr = function (this: Select) {\n    const query = this.query;\n    if (query.distinct) {\n        const groupBy = [];\n        const result = this.results[0];\n        for (const key in result) {\n            groupBy.push(key);\n        }\n        const primaryKey = this.primaryKey();\n        const index = groupBy.indexOf(primaryKey);\n        groupBy.splice(index, 1);\n        query.groupBy = groupBy.length > 0 ? groupBy : null;\n    }\n    if (query.groupBy) {\n        if (query.aggregate) {\n            this.executeAggregateGroupBy();\n        }\n        else {\n            this.processGroupBy();\n        }\n    }\n    else if (query.aggregate) {\n        this.processAggregateQry();\n    }\n};\n\nconst getOrderColumnInfo = function (this: Select, orderColumn: string) {\n    let column: IColumn;\n    if (!this.query.store) {\n        if (this.query.join == null) {\n            column = this.getColumnInfo(orderColumn);\n        }\n        else {\n            const splittedByDot = removeSpace(orderColumn).split(\".\");\n            const joinOrderColumn = splittedByDot[1];\n            if (process.env.NODE_ENV !== 'production' && joinOrderColumn == null) {\n                new LogHelper(ERROR_TYPE.ColumnNotExist,\n                    { column: orderColumn, isOrder: true, isJoin: true }\n                ).throw()\n            }\n            column = this.getColumnInfo(joinOrderColumn, splittedByDot[0]);\n        }\n    }\n    if (column == null) {\n        const valueFromFirstColumn = this.results[0][orderColumn];\n        if (valueFromFirstColumn) {\n            return {\n                dataType: getDataType(valueFromFirstColumn),\n                name: orderColumn\n            } as IColumn;\n        }\n        throw new LogHelper(ERROR_TYPE.ColumnNotExist,\n            { column: orderColumn, isOrder: true }\n        )\n\n    }\n    return column;\n}\n\nconst compareStringInDesc_ = (a: string, b: string) => {\n    return b.localeCompare(a);\n}\n\nconst compareStringinAsc_ = (a: string, b: string) => {\n    return a.localeCompare(b);\n}\n\nconst compareDefaultInDesc_ = (a: string, b) => {\n    return new String(b).localeCompare(a);\n}\n\nconst compareDefaultinAsc_ = (a, b: string) => {\n    return new String(a).localeCompare(b);\n}\n\nconst compareNumberInDesc_ = (a: number, b: number) => {\n    return b - a;\n}\n\nconst compareNumberinAsc_ = (a: number, b: number) => {\n    return a - b;\n}\n\nconst compareDateInDesc_ = (a: Date, b: Date) => {\n    return b.getTime() - a.getTime();\n}\n\nconst compareDateInAsc_ = (a: Date, b: Date) => {\n    return a.getTime() - b.getTime();\n}\n\nconst getValueComparer_ = (column: IColumn, order: IOrderQuery): (a, b) => number => {\n    switch (column.dataType) {\n        case DATA_TYPE.String:\n            return order.type === 'asc' ? compareStringinAsc_ : compareStringInDesc_;\n        case DATA_TYPE.Number:\n            return order.type === 'asc' ? compareNumberinAsc_ : compareNumberInDesc_;\n        case DATA_TYPE.DateTime:\n            return order.type === 'asc' ? compareDateInAsc_ : compareDateInDesc_;\n        default:\n            return order.type === 'asc' ? compareDefaultinAsc_ : compareDefaultInDesc_;\n    }\n\n}\n\nconst orderBy_ = function (this: Select, order: IOrderQuery) {\n    order.type = getOrderType_(order.type);\n    let orderColumn = order.by;\n    const thenEvaluator = this.thenEvaluator;\n    if (orderColumn != null && typeof orderColumn === DATA_TYPE.Object) {\n        const caseQuery = orderColumn as { [columnName: string]: [ICaseOption] };\n        const getValInAscDesc = (stringComparer, numberComparer) => {\n            return (value1, value2) => {\n                for (const columnName in caseQuery) {\n                    thenEvaluator.setCaseAndValue(caseQuery, value1);\n                    const column1 = thenEvaluator.setColumn(columnName).evaluate();\n                    thenEvaluator.setCaseAndValue(caseQuery, value2);\n                    const column2 = thenEvaluator.setColumn(columnName).evaluate();\n                    switch (typeof value1[column1]) {\n                        case DATA_TYPE.String:\n                            return stringComparer(value1[column1], value2[column2]);\n                        default:\n                            return numberComparer(value1[column1], value2[column2]);\n                    }\n                }\n            }\n        };\n        let sortMethod = order.type === 'asc' ?\n            getValInAscDesc(compareStringinAsc_, compareNumberinAsc_) :\n            getValInAscDesc(compareStringInDesc_, compareNumberInDesc_);\n\n        this.results.sort(sortMethod);\n    }\n    else {\n        const columnInfo = getOrderColumnInfo.call(this, orderColumn as string);\n        if (columnInfo != null) {\n            const orderMethod = getValueComparer_(columnInfo, order);\n            orderColumn = columnInfo.name;\n            if (order.case == null) {\n                this.results.sort((a, b) => {\n                    return orderMethod(a[orderColumn as string], b[orderColumn as string]);\n                });\n            }\n            else {\n                thenEvaluator.setCaseAndColumn({ [orderColumn as string]: order.case }, orderColumn as string);\n                this.results.sort((a, b) => {\n                    return orderMethod(\n                        thenEvaluator.setValue(a).evaluate(),\n                        thenEvaluator.setValue(b).evaluate()\n                    );\n                });\n            }\n        }\n    }\n\n}\n\nconst getOrderType_ = (type: string) => {\n    return type == null ? 'asc' : type.toLowerCase();\n}\n\nexport const processOrderBy = function (this: Select) {\n    const order = this.query.order;\n    if (order && this.results.length > 0 && !this.sorted) {\n        const orderQueryType = getDataType(order);\n        if (orderQueryType === DATA_TYPE.Object) {\n            orderBy_.call(this, order);\n        }\n        else if (orderQueryType === DATA_TYPE.Array) {\n            orderBy_.call(this, order[0]);\n            for (let i = 1, length = (order as any).length; i < length; i++) {\n                const prevOrderQueryBy = order[i - 1].by;\n                const currentOrderQuery: IOrderQuery = order[i];\n                let currentorderQueryBy = currentOrderQuery.by;\n                const orderColumnDetail = getOrderColumnInfo.call(this, currentorderQueryBy as string);\n                if (orderColumnDetail != null) {\n                    currentorderQueryBy = orderColumnDetail.name;\n                    currentOrderQuery.type = getOrderType_(currentOrderQuery.type);\n                    const orderMethod = getValueComparer_(orderColumnDetail, currentOrderQuery);\n                    this.results.sort((a, b) => {\n                        if (a[prevOrderQueryBy] === b[prevOrderQueryBy]) {\n                            return orderMethod(\n                                a[currentorderQueryBy as string],\n                                b[currentorderQueryBy as string]\n                            );\n                        }\n                        return 0;\n                    });\n                }\n            }\n        }\n    }\n}\n\nexport const processAggregateQry = function (this: Select) {\n    const datas = this.results;\n    const datasLength = datas.length;\n    const results = {};\n    let columnToAggregate;\n\n    const getCount = () => {\n        let result = 0;\n        for (const i in datas) {\n            result += datas[i][columnToAggregate] ? 1 : 0;\n        }\n        return result;\n    };\n    const getMax = () => {\n        let result = 0;\n        for (const i in datas) {\n            result = result > datas[i][columnToAggregate] ?\n                result : datas[i][columnToAggregate];\n        }\n        return result;\n    };\n    const getMin = () => {\n        let result = Infinity, value = Infinity;\n        for (const i in datas) {\n            value = datas[i][columnToAggregate] ?\n                datas[i][columnToAggregate] : Infinity;\n            result = result < value ? result : value;\n        }\n        return result;\n    };\n    const getSum = () => {\n        let result = 0;\n        for (const i in datas) {\n            result += datas[i][columnToAggregate];\n        }\n        return result;\n    };\n    const getAvg = () => {\n        return getSum() / datasLength;\n    };\n    const aggregateQry = this.query.aggregate;\n    for (const prop in aggregateQry) {\n        const aggregateColumn = aggregateQry[prop];\n        const aggregateValType = getDataType(aggregateColumn);\n        let aggregateCalculator;\n        switch (prop) {\n            case 'count':\n                aggregateCalculator = getCount; break;\n            case 'max':\n                aggregateCalculator = getMax; break;\n            case 'min':\n                aggregateCalculator = getMin; break;\n            case 'sum':\n                aggregateCalculator = getSum; break;\n            case 'avg':\n                aggregateCalculator = getAvg;\n        }\n        switch (aggregateValType) {\n            case DATA_TYPE.String:\n                columnToAggregate = aggregateColumn;\n                results[`${prop}(${columnToAggregate})`] = aggregateCalculator();\n                break;\n            case DATA_TYPE.Array:\n                for (const key in aggregateColumn) {\n                    columnToAggregate = aggregateColumn[key];\n                    results[`${prop}(${columnToAggregate})`] = aggregateCalculator();\n                }\n        }\n    }\n\n    // add results to the first index of result\n    for (const prop in results) {\n        datas[0][prop] = results[prop];\n    }\n    this.results = [datas[0]];\n}","import { Select } from \".\";\nimport { getDataType, getObjectFirstKey } from \"@/worker/utils\";\nimport { QUERY_OPTION, DATA_TYPE } from \"@/common\";\n\nexport const processGroupBy = function (this: Select) {\n    const groupBy = this.query.groupBy as any;\n    let datas = this.results;\n    const lookUpObj = new Map<string, any>();\n\n    const groupByDataType = getDataType(groupBy);\n    if (groupByDataType !== DATA_TYPE.Object) {\n        if (groupByDataType === DATA_TYPE.String) {\n            for (const i in datas) {\n                lookUpObj.set(datas[i][groupBy as string], datas[i]);\n            }\n        }\n        else {\n            let objKey;\n            for (const i in datas) {\n                objKey = \"\";\n                for (const column in groupBy) {\n                    objKey += datas[i][groupBy[column]];\n                }\n                lookUpObj.set(objKey, datas[i]);\n            }\n        }\n    }\n    else {\n        const caseQueryLength = Object.keys(groupBy).length;\n        if (caseQueryLength === 1) {\n            const groupByColumn = getObjectFirstKey(groupBy);\n            this.thenEvaluator.setCaseAndColumn(groupBy, groupByColumn);\n            for (const i in datas) {\n                lookUpObj.set(this.thenEvaluator.setValue(datas[i]).evaluate(), datas[i]);\n            }\n        }\n        else {\n            let objKey;\n            for (const i in datas) {\n                objKey = \"\";\n                this.thenEvaluator.setCaseAndValue(groupBy, datas[i]);\n                for (const column in groupBy) {\n                    objKey += this.thenEvaluator.setColumn(column).evaluate();\n                }\n                lookUpObj.set(objKey, datas[i]);\n            }\n        }\n    }\n\n    this.results = Array.from(lookUpObj.values());\n}\n\nexport const executeAggregateGroupBy = function (this: Select) {\n    const grpQry = this.query.groupBy as any;\n    let datas = this.results;\n\n    const lookUpObj = new Map<string, any>();\n    // assign aggregate\n    const aggregateQry = this.query.aggregate;\n\n    let index;\n    let objKey;\n    let value;\n    let columnToAggregate;\n    const calculateAggregate = () => {\n        const getCount = () => {\n            value = lookUpObj.get(objKey);\n            // get old value\n            value = value ? value[\"count(\" + columnToAggregate + \")\"] : 0;\n            // add with old value if data exist\n            value += datas[index][columnToAggregate] ? 1 : 0;\n            return value;\n        };\n        const getList = () => {\n            value = lookUpObj.get(objKey);\n            // get old value\n            value = value ? value[\"list(\" + columnToAggregate + \")\"] : [];\n            // push value\n            value.push(datas[index][columnToAggregate]);\n            return value;\n        };\n        const getMax = () => {\n            value = lookUpObj.get(objKey);\n            // get old value\n            value = value ? value[\"max(\" + columnToAggregate + \")\"] : 0;\n            datas[index][columnToAggregate] = datas[index][columnToAggregate] ?\n                datas[index][columnToAggregate] : 0;\n            // compare between old value and new value\n            return value > datas[index][columnToAggregate] ? value : datas[index][columnToAggregate];\n        };\n        const getMin = () => {\n            value = lookUpObj.get(objKey);\n            // get old value\n            value = value ? value[\"min(\" + columnToAggregate + \")\"] : Infinity;\n            datas[index][columnToAggregate] = datas[index][columnToAggregate] ?\n                datas[index][columnToAggregate] : Infinity;\n            // compare between old value and new value\n            return value < datas[index][columnToAggregate] ? value : datas[index][columnToAggregate];\n        };\n        const getSum = () => {\n            value = lookUpObj.get(objKey);\n            // get old value\n            value = value ? value[\"sum(\" + columnToAggregate + \")\"] : 0;\n            // add with old value if data exist\n            value += datas[index][columnToAggregate] ? datas[index][columnToAggregate] : 0;\n            return value;\n        };\n        const getAvg = () => {\n            value = lookUpObj.get(objKey)\n            // get old sum value\n            let sumOfColumn = value ? value[\"sum(\" + columnToAggregate + \")\"] : 0;\n            // add with old value if data exist\n            sumOfColumn += datas[index][columnToAggregate] ? datas[index][columnToAggregate] : 0;\n            datas[index][\"sum(\" + columnToAggregate + \")\"] = sumOfColumn;\n            // get old count value\n            value = value ? value[\"count(\" + columnToAggregate + \")\"] : 0;\n            // add with old value if data exist\n            value += datas[index][columnToAggregate] ? 1 : 0;\n            datas[index][\"count(\" + columnToAggregate + \")\"] = value;\n        };\n        for (const prop in aggregateQry) {\n            const aggregateColumn = aggregateQry[prop];\n            const aggregateValType = getDataType(aggregateColumn);\n            let aggregateCalculator;\n            switch (prop) {\n                case QUERY_OPTION.Count:\n                    aggregateCalculator = getCount;\n                    break;\n                case QUERY_OPTION.Max:\n                    aggregateCalculator = getMax;\n                    break;\n                case QUERY_OPTION.Min:\n                    aggregateCalculator = getMin;\n                    break;\n                case QUERY_OPTION.Sum:\n                    aggregateCalculator = getSum;\n                    break;\n                case QUERY_OPTION.Avg:\n                    aggregateCalculator = getAvg;\n                    break;\n                case QUERY_OPTION.List:\n                    aggregateCalculator = getList;\n                    break;\n            }\n            switch (aggregateValType) {\n                case DATA_TYPE.String:\n                    columnToAggregate = aggregateColumn;\n                    datas[index][`${prop}(${columnToAggregate})`] = aggregateCalculator();\n                    break;\n                case DATA_TYPE.Array:\n                    for (const item in aggregateColumn) {\n                        columnToAggregate = aggregateColumn[item];\n                        datas[index][`${prop}(${columnToAggregate})`] = aggregateCalculator();\n                    }\n            }\n        }\n    };\n\n    if (getDataType(grpQry) === DATA_TYPE.String) {\n        for (index in datas) {\n            objKey = datas[index][grpQry];\n            calculateAggregate();\n            lookUpObj.set(objKey, datas[index]);\n        }\n    }\n    else {\n        for (index in datas) {\n            objKey = \"\";\n            for (const column in grpQry) {\n                objKey += datas[index][grpQry[column]];\n            }\n            calculateAggregate();\n            lookUpObj.set(objKey, datas[index]);\n        }\n\n    }\n    datas = Array.from(lookUpObj.values());\n\n    // Checking for avg and if exist then fill the datas;\n    const avgQuery = aggregateQry.avg;\n    if (avgQuery) {\n        if (getDataType(avgQuery) === DATA_TYPE.String) {\n            for (index in datas) {\n                const sumForAvg = datas[index][\"sum(\" + avgQuery + \")\"],\n                    countForAvg = datas[index][\"count(\" + avgQuery + \")\"];\n                datas[index][\"avg(\" + avgQuery + \")\"] = sumForAvg / countForAvg;\n                if (aggregateQry.count !== avgQuery) {\n                    delete datas[index][\"count(\" + avgQuery + \")\"];\n                }\n                if (aggregateQry.sum !== avgQuery) {\n                    delete datas[index][\"sum(\" + avgQuery + \")\"];\n                }\n            }\n        }\n        else {\n            const isCountTypeString = getDataType(aggregateQry.count) === DATA_TYPE.String;\n            const isSumTypeString = getDataType(aggregateQry.sum) === DATA_TYPE.String;\n            for (index in datas) {\n                for (const column in avgQuery as any) {\n                    const avgColumn = avgQuery[column],\n                        sum = datas[index][\"sum(\" + avgColumn + \")\"],\n                        count = datas[index][\"count(\" + avgColumn + \")\"];\n                    datas[index][\"avg(\" + avgColumn + \")\"] = sum / count;\n\n                    if (isCountTypeString) {\n                        if (aggregateQry.count !== avgColumn) {\n                            delete datas[index][\"count(\" + avgColumn + \")\"];\n                        }\n                        else if (aggregateQry.count.indexOf(avgColumn) === -1) {\n                            delete datas[index][\"count(\" + avgColumn + \")\"];\n                        }\n                    }\n\n                    if (isSumTypeString) {\n                        if (aggregateQry.sum !== avgColumn) {\n                            delete datas[index][\"sum(\" + avgColumn + \")\"];\n                        }\n                        else if (aggregateQry.sum.indexOf(avgColumn) === -1) {\n                            delete datas[index][\"sum(\" + avgColumn + \")\"];\n                        }\n                    }\n                }\n            }\n        }\n    }\n    this.results = datas;\n}\n","import { OCCURENCE } from \"@/common\";\n\nexport const getRegexFromLikeExpression = (likeExpression: string) => {\n    const filterValues = likeExpression.split('%');\n    let filterValue: string;\n    let occurence: OCCURENCE;\n    if (filterValues[1]) {\n        filterValue = filterValues[1];\n        occurence = filterValues.length > 2 ? OCCURENCE.Any : OCCURENCE.Last;\n    }\n    else {\n        filterValue = filterValues[0];\n        occurence = OCCURENCE.First;\n    }\n    switch (occurence) {\n        case OCCURENCE.First:\n            return new RegExp(`^${filterValue}`, 'i');\n        case OCCURENCE.Last:\n            return new RegExp(`${filterValue}$`, 'i');\n        default:\n            return new RegExp(`${filterValue}`, 'i');\n    }\n}","import { getDataType } from \"./get_data_type\";\n\nconst isObject = (value) => {\n    return getDataType(value) === 'object' && !(value instanceof RegExp);\n};\n\nexport const clone = (obj) => {\n    if (isObject(obj)) {\n        const copy = {};\n        for (const i in obj) {\n            copy[i] = obj[i] != null && isObject(obj[i]) ? clone(obj[i]) : obj[i];\n        }\n        return copy;\n    }\n    return obj;\n};","import { getDataType } from \"./get_data_type\"\nimport { QUERY_OPTION, DATA_TYPE } from \"@/common\";\n\nexport const compare = (value, compareValue, symbol?) => {\n    const type1 = getDataType(value);\n    const type2 = getDataType(compareValue);\n\n    if (type1 !== type2) return false;\n    if (type1 === DATA_TYPE.DateTime) {\n        value = value.getTime();\n        compareValue = compareValue.getTime();\n    }\n    switch (symbol) {\n        // greater than\n        case QUERY_OPTION.GreaterThan:\n            return value > compareValue;\n        // less than\n        case QUERY_OPTION.LessThan:\n            return value < compareValue;\n        // less than equal\n        case QUERY_OPTION.LessThanEqualTo:\n            return value <= compareValue;\n        // greather than equal\n        case QUERY_OPTION.GreaterThanEqualTo:\n            return value >= compareValue;\n        // Not equal to\n        case QUERY_OPTION.NotEqualTo:\n            return value !== compareValue;\n        default:\n            return value === compareValue;\n    }\n}","import { QUERY_OPTION } from \"@/common\";\nimport { getDataType, clone, compare, getRegexFromLikeExpression } from \"@worker/utils\";\n\n/**\n * For matching the different column value existance for where option\n * \n * @export\n * @class WhereChecker\n */\nexport class WhereChecker {\n  where: object;\n  checkFlag: boolean;\n\n  constructor(where: object, checkFlag: boolean) {\n    this.where = clone(where);\n    this.checkFlag = checkFlag;\n  }\n\n  remove(props: string[]) {\n    const last = props.pop();\n    const value = props.reduce((prev, curr) => prev && prev[curr], this.where);\n    delete value[last];\n  }\n\n  check(rowValue) {\n    let status = true;\n    if (!this.checkFlag) return status;\n    for (let columnName in this.where) {\n      if (!status) {\n        return status;\n      }\n      const whereColumnValue = this.where[columnName];\n      const columnValue = rowValue[columnName];\n      if (getDataType(whereColumnValue) === \"object\") {\n        for (const key in whereColumnValue) {\n          if (!status) {\n            return status;\n          }\n          switch (key) {\n            case QUERY_OPTION.In:\n              status = this.checkIn(columnName, columnValue);\n              break;\n            case QUERY_OPTION.Like:\n              status = this.checkLike_(columnName, columnValue);\n              break;\n            case QUERY_OPTION.Regex:\n              status = this.checkRegex(columnName, columnValue);\n              break;\n            case QUERY_OPTION.Between:\n            case QUERY_OPTION.GreaterThan:\n            case QUERY_OPTION.LessThan:\n            case QUERY_OPTION.GreaterThanEqualTo:\n            case QUERY_OPTION.LessThanEqualTo:\n            case QUERY_OPTION.NotEqualTo:\n              status = this.checkComparisionOp_(columnName, columnValue, key);\n              break;\n            default:\n              status = false;\n          }\n        }\n      }\n      else {\n        status = compare(whereColumnValue, columnValue);\n      }\n    }\n    return status;\n  }\n\n  private checkIn(column, value) {\n    return (this.where[column][QUERY_OPTION.In] as any[]).find(q => compare(q, value)) != null;\n  }\n\n  private checkLike_(column, value) {\n    return getRegexFromLikeExpression(this.where[column][QUERY_OPTION.Like]).test(value);\n  }\n\n  private checkRegex(column, value) {\n    return this.where[column][QUERY_OPTION.Regex].test(value);\n  }\n\n  private checkComparisionOp_(column, value, symbol) {\n    const compareValue = this.where[column][symbol];\n    if (symbol != QUERY_OPTION.Between) {\n      return compare(value, compareValue, symbol);\n    }\n    return compare(value, compareValue.low, '>=') &&\n      compare(value, compareValue.high, '<=');\n  }\n}","import { Base } from \"./base\";\nimport { ISelectQuery, QUERY_OPTION, ERROR_TYPE } from \"@/common\";\nimport { getRegexFromLikeExpression, promiseReject } from \"@worker/utils\";\nimport { LogHelper, getObjectFirstKey, getDataType, getLength } from \"@worker/utils\";\nimport { WhereChecker } from \"./where_checker\";\nimport { executeWhereLogic } from \"./select/where\";\nimport { executeInLogic } from \"./select/in\";\nimport { executeRegexLogic } from \"./select/regex\";\n\nexport class BaseFetch extends Base {\n    query: ISelectQuery;\n    whereChecker: WhereChecker;\n    executeWhereLogic: typeof executeWhereLogic;\n    skipRecord;\n    limitRecord;\n    limitAtEnd = false;\n    skipAtEnd = false;\n    executeInLogic: typeof executeInLogic;\n    executeRegexLogic: typeof executeRegexLogic;\n\n    resultCount: number;\n\n    protected shouldAddValue: (value) => boolean;\n    protected goToWhereLogic() {\n        const query = this.query as ISelectQuery;\n        const whereQuery = query.where;\n        let firstColumn = (() => {\n            for (const key in whereQuery) {\n                if (this.objectStore.indexNames.contains(key)) {\n                    return key;\n                }\n            }\n        })();\n        if (firstColumn == null) {\n            firstColumn = getObjectFirstKey(whereQuery);\n            if (!query.store) {\n                return promiseReject(\n                    new LogHelper(ERROR_TYPE.NoIndexFound, { column: firstColumn })\n                );\n            }\n        }\n        const value = whereQuery[firstColumn];\n        if (getDataType(value) === 'object') {\n            const checkFlag = getLength(value) > 1 ||\n                getLength(whereQuery) > 1\n\n            this.whereChecker = new WhereChecker(whereQuery, checkFlag);\n            const key = getObjectFirstKey(value);\n            this.whereChecker.remove([firstColumn, key]);\n            switch (key) {\n                case QUERY_OPTION.Like: {\n                    const regexVal = getRegexFromLikeExpression(value[QUERY_OPTION.Like]);\n                    return this.executeRegexLogic(firstColumn, regexVal);\n                }\n                case QUERY_OPTION.Regex:\n                    return this.executeRegexLogic(firstColumn, value[QUERY_OPTION.Regex]);\n                case QUERY_OPTION.In:\n                    return this.executeInLogic(\n                        firstColumn, value[QUERY_OPTION.In]\n                    );\n                case QUERY_OPTION.Between:\n                case QUERY_OPTION.GreaterThan:\n                case QUERY_OPTION.LessThan:\n                case QUERY_OPTION.GreaterThanEqualTo:\n                case QUERY_OPTION.LessThanEqualTo:\n                    return this.executeWhereLogic(firstColumn, value, key, \"next\");\n                case QUERY_OPTION.Aggregate: break;\n                default:\n                    return this.executeWhereLogic(firstColumn, value, null, \"next\");\n            }\n        }\n        else {\n            const checkFlag = getLength(whereQuery) > 1;\n            this.whereChecker = new WhereChecker(whereQuery, checkFlag);\n            this.whereChecker.remove([firstColumn]);\n            return this.executeWhereLogic(firstColumn, value, null, \"next\");\n        }\n    }\n\n}","import { BaseFetch } from \"../base_fetch\";\nimport { Select } from \".\";\nimport { promise } from \"@/common\";\nimport { executeLimitForWhere_, executeSimpleForWhere_, getCursorOnSuccess } from \"./where\";\n\n\nexport const executeRegexLogic = function (this: BaseFetch, column, exp: RegExp) {\n\n    let skip = this.skipRecord;\n    const skipOrPush = (val) => {\n        if (skip === 0) {\n            (this as Select)['pushResult'](val);\n        }\n        else {\n            --skip;\n        }\n    };\n    this.shouldAddValue = (cursor) => {\n        return exp.test(cursor.key) &&\n            this.whereChecker.check(cursor.value);\n    };\n\n    const cursorRequest = this.objectStore.index(column).openCursor();\n\n    const onSuccess = getCursorOnSuccess.call(\n        this,\n        executeSimpleForWhere_,\n        executeLimitForWhere_,\n        executeSkipForWhere_,\n        executeSkipAndLimitForWhere_\n    );\n\n    return promise<any>((res, rej) => {\n        cursorRequest.onerror = rej;\n        cursorRequest.onsuccess = onSuccess.call(this, res, skipOrPush);\n    })\n\n}\n\nexport const executeSkipAndLimitForWhere_ = function (this: Select, onFinish, skipOrPush) {\n    return (e: any) => {\n        const cursor = e.target.result;\n        if (this.results.length !== this.limitRecord && cursor) {\n            if (this.shouldAddValue(cursor)) {\n                skipOrPush(cursor.value);\n            }\n            cursor.continue();\n        } else {\n            onFinish();\n        }\n    };\n}\n\nexport const executeSkipForWhere_ = function (this: Select, onFinish, skipOrPush) {\n    return (e: any) => {\n        const cursor = e.target.result;\n        if (cursor) {\n            if (this.shouldAddValue(cursor)) {\n                skipOrPush((cursor.value));\n            }\n            cursor.continue();\n        } else {\n            onFinish();\n        }\n    };\n}\n\n\n\n\n","import { Select } from \"./\";\nimport { promise, promiseAll } from \"@/common\";\nimport { BaseFetch } from \"../base_fetch\";\nimport { executeLimitForWhere_, executeSimpleForWhere_, getCursorOnSuccess } from \"./where\";\nimport { executeSkipAndLimitForWhere_, executeSkipForWhere_ } from \"./regex\";\n\nexport const executeInLogic = function (this: BaseFetch, column, values) {\n    let skip = this.skipRecord;\n    const skipOrPush = (val) => {\n        if (skip === 0) {\n            (this as Select)['pushResult'](val);\n        }\n        else {\n            --skip;\n        }\n    };\n    const onSuccess = getCursorOnSuccess.call(\n        this,\n        executeSimpleForWhere_,\n        executeLimitForWhere_,\n        executeSkipForWhere_,\n        executeSkipAndLimitForWhere_\n    );\n\n    const runInLogic: (val) => Promise<void> = (value) => {\n        return promise((res, rej) => {\n            const cursorRequest = this.objectStore.index(column).openCursor(\n                this.util.keyRange(value)\n            );\n            cursorRequest.onsuccess = onSuccess.call(this, res, skipOrPush);\n            cursorRequest.onerror = rej;\n        });\n    };\n\n    return promiseAll<void>(\n        values.map(runInLogic)\n    );\n\n};\n","import { Select } from \"./\";\nimport { IJoinQuery, DATA_TYPE, ERROR_TYPE, ISelectQuery, IErrorType } from \"@/common\";\nimport { getDataType, LogHelper, removeSpace, promiseReject, getKeys, getLength } from \"@/worker/utils\";\nimport { WhereChecker } from \"@executors/where_checker\";\n\n\nexport const executeJoinQuery = function (this: Select) {\n    return new Join(this).execute();\n}\n\ninterface JoinQueryWithInfo extends IJoinQuery {\n    joinTableInfo: JoinTableInfo\n}\n\nclass Join {\n\n    private joinQueryStack_: JoinQueryWithInfo[] = [];\n    private currentQueryStackIndex_ = 0;\n    tablesFetched = [];\n    results = [];\n\n    select: Select;\n    constructor(select: Select) {\n        this.select = select;\n    }\n\n    get query() {\n        return this.select.query;\n    }\n\n    getTable(name: string) {\n        return this.select.table(name);\n    }\n\n    private executeSelect(query: ISelectQuery) {\n        // this.select.util.emptyTx();\n        return new Select(query, this.select.util).\n            execute();\n    }\n\n    execute() {\n        const query = this.query;\n        this.joinQueryStack_ = getDataType(query.join) === DATA_TYPE.Object ?\n            [query.join as JoinQueryWithInfo] : query.join as JoinQueryWithInfo[];\n        // get the data for first table\n        const tableName = query.from;\n        const tablesToFetch = [];\n        if (tableName) {\n            tablesToFetch.push(tableName);\n        }\n        const joinQueryStack = this.joinQueryStack_;\n        for (let i = 0, length = joinQueryStack.length; i < length; i++) {\n            const item = joinQueryStack[i];\n            let jointblInfo = this.getJoinTableInfo_(item.on);\n            // table 1 is fetched & table2 needs to be fetched for join\n            if (item.with === jointblInfo.table1.table) {\n                jointblInfo = {\n                    table1: jointblInfo.table2,\n                    table2: jointblInfo.table1\n                };\n            }\n\n            const err = this.checkJoinQuery_(jointblInfo, item);\n            if (err) {\n                return promiseReject(err);\n            }\n            joinQueryStack[i].joinTableInfo = jointblInfo;\n            if (item.with) {\n                tablesToFetch.push(item.with)\n            }\n        }\n\n        if (!this.select.isTxQuery && tablesToFetch.length > 0) {\n            this.select.util.createTransaction(tablesToFetch);\n        }\n\n        return this.executeSelect({\n            from: tableName,\n            where: query.where,\n            case: query.case,\n            flatten: query.flatten,\n            store: query.store,\n            meta: query.meta\n        }).then(results => {\n            this.results = results.map((item) => {\n                return {\n                    [this.currentQueryStackIndex_]: item\n                };\n            });\n            this.tablesFetched.push(\n                joinQueryStack[0].joinTableInfo.table1.table\n            );\n            return this.startExecutingJoinLogic_();\n        });\n    }\n\n    private onJoinQueryFinished_() {\n        if (this.results.length === 0) return;\n        const selectApi = this.select;\n        try {\n            let results = [];\n            const tables = getKeys(this.results[0]);\n            const tablesLength = tables.length;\n            this.results.forEach((result) => {\n                let data = result[\"0\"]; // first table data\n                for (let i = 1; i < tablesLength; i++) {\n                    data = { ...data, ...result[i] };\n                }\n                results.push(data);\n            });\n            selectApi['results'] = results;\n            selectApi.setLimitAndSkipEvaluationAtEnd_();\n            selectApi.query.flatten = null;\n            if (process.env.NODE_ENV !== 'production') {\n                try {\n                    selectApi.processOrderBy();\n                }\n                catch (ex) {\n                    return promiseReject(\n                        new LogHelper((ERROR_TYPE as IErrorType).InvalidOrderQuery, ex.message)\n                    );\n                }\n            }\n            else {\n                selectApi.processOrderBy();\n            }\n        }\n        catch (ex) {\n            return promiseReject(\n                new LogHelper(ERROR_TYPE.InvalidJoinQuery, ex.message)\n            );\n        }\n    }\n\n    private startExecutingJoinLogic_() {\n        const joinQuery = this.joinQueryStack_[this.currentQueryStackIndex_];\n        if (joinQuery) {\n            try {\n                let jointblInfo = joinQuery.joinTableInfo;\n                return this.executeSelect({\n                    from: joinQuery.with,\n                    where: joinQuery.where,\n                    case: joinQuery.case,\n                    flatten: joinQuery.flatten,\n                    store: joinQuery.store,\n                    meta: joinQuery.meta\n                }).then(results => {\n                    this.jointables(joinQuery, jointblInfo, results);\n                    this.tablesFetched.push(jointblInfo.table2.table);\n                    ++this.currentQueryStackIndex_;\n                    return this.startExecutingJoinLogic_();\n                });\n            }\n            catch (ex) {\n                return promiseReject(\n                    new LogHelper(ERROR_TYPE.InvalidJoinQuery, ex.message)\n                );\n            }\n        }\n        else {\n            return this.onJoinQueryFinished_();\n        }\n    }\n\n    private jointables(joinQuery: JoinQueryWithInfo, jointblInfo: JoinTableInfo, secondtableData: any[]) {\n        const joinType = joinQuery.type;\n        const output = [];\n        const column1 = jointblInfo.table1.column;\n        const column2 = jointblInfo.table2.column;\n        const table1Index = this.tablesFetched.indexOf(jointblInfo.table1.table);\n        const table2Index = this.currentQueryStackIndex_ + 1;\n        const asQuery = joinQuery.as;\n        const mapWithAlias = asQuery ? (value: object) => {\n            for (const key in asQuery) {\n                const asValue = asQuery[key];\n                if (value[asValue] === undefined) {\n                    value[asValue] = value[key];\n                    delete value[key];\n                }\n            }\n            return value;\n        } : (val) => val;\n        const performInnerJoin = () => {\n            let index = 0;\n            this.results.forEach(valueFromFirstTable => {\n                secondtableData.forEach((valueFromSecondTable) => {\n                    if (valueFromFirstTable[table1Index][column1] === valueFromSecondTable[column2]) {\n                        output[index] = { ...valueFromFirstTable };\n                        output[index++][table2Index] = mapWithAlias({ ...valueFromSecondTable });\n                    }\n                });\n            });\n        };\n        const performleftJoin = () => {\n            let index = 0;\n            let valueMatchedFromSecondTable: any[];\n            let callBack;\n            const columnDefaultValue = {};\n            const nullValue = null;\n            if (joinQuery.store) {\n                getKeys(joinQuery.store).forEach(columnName => {\n                    columnDefaultValue[columnName] = nullValue;\n                })\n            }\n            else {\n                this.getTable(jointblInfo.table2.table).columns.forEach(col => {\n                    columnDefaultValue[col.name] = nullValue;\n                });\n            }\n\n            if (table2Index === 1) {\n                callBack = function (valueFromSecondTable, valueFromFirstTable) {\n                    if (valueFromFirstTable[table1Index][column1] === valueFromSecondTable[column2]) {\n                        valueMatchedFromSecondTable.push(valueFromSecondTable);\n                    }\n                };\n            }\n            else {\n                callBack = function (valueFromSecondTable, valueFromFirstTable) {\n                    const value = valueFromFirstTable[table1Index];\n                    if (value != null && value[column1] === valueFromSecondTable[column2]) {\n                        valueMatchedFromSecondTable.push(valueFromSecondTable);\n                    }\n                };\n            }\n            const whereQry = Object.assign(joinQuery.where || {}, joinQuery['whereJoin'] || {});\n            const whereCheker = new WhereChecker(whereQry, getLength(whereQry) > 0);\n            this.results.forEach((valueFromFirstTable) => {\n                valueMatchedFromSecondTable = [];\n                // perform left join\n                secondtableData.forEach(val => {\n                    callBack(val, valueFromFirstTable)\n                });\n\n                if (valueMatchedFromSecondTable.length === 0) {\n                    valueMatchedFromSecondTable = [columnDefaultValue];\n                }\n\n                valueMatchedFromSecondTable.forEach(function (value) {\n                    value = mapWithAlias(value);\n                    if (!whereCheker.check(value)) return;\n\n                    output[index] = { ...valueFromFirstTable };\n                    output[index++][table2Index] = value;\n                });\n            });\n        };\n        switch (joinType) {\n            case \"left\":\n                performleftJoin(); break;\n            default:\n                performInnerJoin();\n        }\n        this.results = output;\n    }\n\n    private getJoinTableInfo_(joinOn: string) {\n        joinOn = removeSpace(joinOn);\n        const splittedjoinOn = joinOn.split(\"=\");\n        const splittedjoinOnbydotFirst = splittedjoinOn[0].split(\".\");\n        const splittedjoinOnbydotSecond = splittedjoinOn[1].split(\".\");\n        const info = {\n            table1: {\n                table: splittedjoinOnbydotFirst[0],\n                column: splittedjoinOnbydotFirst[1]\n            },\n            table2: {\n                table: splittedjoinOnbydotSecond[0],\n                column: splittedjoinOnbydotSecond[1]\n            }\n        } as JoinTableInfo;\n        return info;\n    }\n\n    private checkJoinQuery_(jointblInfo: JoinTableInfo, qry: IJoinQuery) {\n        if (qry.store) return null;\n\n        const table1 = jointblInfo.table1;\n        const table2 = jointblInfo.table2;\n        const tableSchemaOf1stTable = this.getTable(table1.table);\n        const tableSchemaOf2ndTable = this.getTable(table2.table);\n        let err: LogHelper;\n        // check on info & with info \n        if (qry.with !== table2.table) {\n            err = new LogHelper(ERROR_TYPE.InvalidJoinQuery,\n                `on value should contains value of with`\n            );\n        }\n\n        // check for column existance\n        if (tableSchemaOf1stTable.columns.find(q => q.name === table1.column) == null) {\n            err = new LogHelper(ERROR_TYPE.InvalidJoinQuery,\n                `column ${table1.column} does not exist in table ${table1.table}`\n            );\n        }\n        else if (tableSchemaOf2ndTable.columns.find(q => q.name === table2.column) == null) {\n            err = new LogHelper(ERROR_TYPE.InvalidJoinQuery,\n                `column ${table2.column} does not exist in table ${table2.table}`\n            );\n        }\n\n        // check for column match in both table\n        if (qry.as == null) {\n            qry.as = {};\n        }\n        tableSchemaOf1stTable.columns.every(function (column) {\n            const columnFound = tableSchemaOf2ndTable.columns.find(q => q.name === column.name && q.name !== table1.column);\n            if (columnFound != null && qry.as[columnFound.name] == null) {\n                err = new LogHelper(ERROR_TYPE.InvalidJoinQuery,\n                    `column ${column.name} exist in both table ${table1.table} & ${table2.table}`\n                );\n                return false;\n            }\n            return true;\n        });\n        const whereQry = qry.where;\n        if (whereQry) {\n            const whereJoin = {};\n            for (const key in whereQry) {\n                // const whereQueryVal = whereQry[key];\n                const columnFound = tableSchemaOf2ndTable.columns.find(q => q.name === key);\n                if (!columnFound) {\n                    whereJoin[key] = whereQry[key];\n                    delete whereQry[key];\n                }\n            }\n            qry['whereJoin'] = whereJoin;\n            if (getLength(whereQry) === 0) {\n                qry.where = null;\n            }\n        }\n        return err;\n    }\n}\n\ntype JoinTableInfo = {\n    table1: { table: string, column: string }\n    table2: { table: string, column: string }\n};","import { promiseResolve } from \"@/common\";\nimport { getKeys } from \"../utils\";\n\nexport class MemoryObjectStore {\n    data: any[];\n\n    constructor(data: any[]) {\n        this.data = data;\n    }\n\n    get indexNames() {\n        const keys = getKeys(this.data[0])\n        return {\n            contains(columnName: string) {\n                return keys.indexOf(columnName) >= 0;\n            }\n        }\n    }\n\n    index(column: string) {\n        return {\n            openCursor: (keyRange?: IDBKeyRange) => {\n                const cursorRequest = {\n\n                } as {\n                    onsuccess: Function,\n                    onerror: Function\n                }\n                let index = 0;\n                const cursor = {\n                    continue() {\n                        ++index;\n                        execute();\n                    },\n                }\n                const callOnSuccess = (result) => {\n                    cursorRequest.onsuccess({\n                        target: {\n                            result\n                        }\n                    });\n                }\n                const execute = () => {\n                    const value = this.data[index];\n                    if (value) {\n                        const columnValue = value[column];\n                        if (columnValue && (keyRange == null || keyRange.includes(columnValue))) {\n                            (cursor as any).key = columnValue;\n                            (cursor as any).value = value;\n                            callOnSuccess(cursor)\n                        }\n                        else {\n                            cursor.continue();\n                        }\n                    }\n                    else {\n                        callOnSuccess(null);\n                    }\n                }\n                promiseResolve().then(execute);\n                return cursorRequest;\n            }\n        }\n    }\n}","import { ISelectQuery, QUERY_OPTION, IDB_MODE, API, IWhereQuery, promiseResolve, IOrderQuery } from \"@/common\";\nimport { IDBUtil } from \"@/worker/idbutil\";\nimport { QueryHelper } from \"@worker/executors/query_helper\";\nimport { isArray, isObject, getObjectFirstKey, promiseReject, getLength } from \"@/worker/utils\";\nimport { setPushResult, setLimitAndSkipEvaluationAtEnd, removeDuplicates } from \"./base_select\";\nimport { ThenEvaluator } from \"./then_evaluator\";\nimport { executeWhereUndefinedLogic } from \"./not_where\"\nimport { processAggregateQry, processGroupDistinctAggr, processOrderBy } from \"./order_by\";\nimport { executeAggregateGroupBy, processGroupBy } from \"./group_by\";\nimport { executeWhereLogic } from \"./where\";\nimport { BaseFetch } from \"@executors/base_fetch\";\nimport { executeInLogic } from \"./in\";\nimport { executeRegexLogic } from \"./regex\";\nimport { executeJoinQuery } from \"./join\";\nimport { MemoryObjectStore } from \"@/worker/memory_store\";\n\nexport class Select extends BaseFetch {\n    sorted = false;\n    isOr: boolean;\n    isArrayQry: boolean;\n    query: ISelectQuery;\n    orInfo: {\n        results?: any[];\n        orQuery: object\n    };\n\n    isSubQuery = false;\n\n    protected pushResult: (value) => void;\n\n    protected thenEvaluator = new ThenEvaluator();\n\n    executeWhereUndefinedLogic: typeof executeWhereUndefinedLogic;\n\n    setLimitAndSkipEvaluationAtEnd_: typeof setLimitAndSkipEvaluationAtEnd\n    setPushResult: typeof setPushResult;\n    removeDuplicates: typeof removeDuplicates;\n    executeJoinQuery: typeof executeJoinQuery\n    processGroupDistinctAggr: typeof processGroupDistinctAggr;\n    processOrderBy: typeof processOrderBy;\n    processAggregateQry: typeof processAggregateQry;\n    executeAggregateGroupBy: typeof executeAggregateGroupBy;\n    processGroupBy: typeof processGroupBy;\n\n\n    constructor(query: ISelectQuery, util: IDBUtil) {\n        super();\n        this.query = query;\n        this.util = util;\n        this.tableName = query.from;\n        this.setPushResult();\n        if (isArray(query.where)) {\n            this.isArrayQry = true;\n            this.setLimitAndSkipEvaluationAtEnd_();\n        }\n        else {\n            this.skipRecord = query.skip;\n            this.limitRecord = query.limit;\n        }\n        const orderQuery = query.order;\n        if (orderQuery) {\n            if (isArray(orderQuery) || (orderQuery as IOrderQuery).case || isObject((orderQuery as IOrderQuery).by)) {\n                ((orderQuery as IOrderQuery).idbSorting) = false;\n            }\n            this.setLimitAndSkipEvaluationAtEnd_();\n        }\n        else if (query.groupBy) {\n            this.setLimitAndSkipEvaluationAtEnd_();\n        }\n    }\n\n    execute(beforeExecute?: () => Promise<any>): Promise<any> {\n        let pResult: Promise<void>;\n        if (!beforeExecute) {\n            beforeExecute = () => promiseResolve(null);\n        }\n        const query = this.query;\n        try {\n            const err = new QueryHelper(this.db).validate(API.Select, query);\n            if (err) return promiseReject(err);\n            return beforeExecute().then(_ => {\n                this.initTransaction_();\n                if (query.join == null) {\n                    if (query.where != null) {\n                        if (isArray(query.where)) {\n                            pResult = this.processWhereArrayQry();\n                        }\n                        else {\n                            pResult = this.processWhere_();\n                        }\n                    }\n                    else {\n                        pResult = this.executeWhereUndefinedLogic();\n                    }\n                }\n                else {\n                    pResult = this.executeJoinQuery();\n                }\n                return pResult.then(\n                    this.returnResult_.bind(this)\n                )\n            })\n\n        }\n        catch (ex) {\n            return this.onException(ex);\n        }\n    }\n\n    private processWhereArrayQry() {\n        this.isArrayQry = true;\n        const whereQuery = this.query.where as IWhereQuery[];\n        const pKey = this.primaryKey();\n        let isFirstWhere = true, output = [], operation;\n\n        const isItemExist = (keyValue) => {\n            return output.findIndex(item => item[pKey] === keyValue) >= 0;\n        };\n        const onSuccess = () => {\n            if (operation === QUERY_OPTION.And) {\n                const doAnd = () => {\n                    let andResults = [];\n                    this.results.forEach((item) => {\n                        if (isItemExist(item[pKey])) {\n                            andResults.push(item);\n                        }\n                    });\n                    output = andResults;\n                    andResults = null;\n                };\n\n                if (isFirstWhere === true) {\n                    output = this.results;\n                }\n                else if (output.length > 0) {\n                    doAnd();\n                }\n            }\n            else {\n                if (output.length > 0) {\n                    this.results = [...output, ...this.results];\n                    this.removeDuplicates();\n                    output = this.results;\n                }\n                else {\n                    output = this.results;\n                }\n            }\n            isFirstWhere = false;\n            if (whereQuery.length > 0) {\n                this.results = [];\n                return processFirstQry();\n            }\n            else {\n                this.results = output;\n            }\n\n        };\n        const processFirstQry = () => {\n            let whereQueryToProcess = whereQuery.shift();\n            if (whereQueryToProcess[QUERY_OPTION.Or]) {\n                if (getLength(whereQueryToProcess) === 1) {\n                    operation = QUERY_OPTION.Or;\n                    whereQueryToProcess = whereQueryToProcess[QUERY_OPTION.Or] as any;\n                }\n                else {\n                    operation = QUERY_OPTION.And;\n                }\n            }\n            else {\n                operation = QUERY_OPTION.And;\n            }\n            this.query.where = whereQueryToProcess;\n            return this.processWhere_().then(onSuccess);\n        };\n        return processFirstQry();\n    }\n\n    private initTransaction_() {\n        const store = this.query.store\n        if (store) {\n            this.objectStore = new MemoryObjectStore(store as any[]) as any;\n            return\n        }\n        if (!this.isTxQuery) {\n            this.util.createTransactionIfNotExist([this.tableName], IDB_MODE.ReadOnly);\n        }\n        this.objectStore = this.util.objectStore(this.tableName);\n    }\n\n    private processWhere_() {\n        this.shouldAddValue = (cursor: IDBCursorWithValue) => {\n            return this.whereChecker.check(cursor.value);\n        };\n        if ((this.query.where as IWhereQuery).or) {\n            this.processOrLogic_();\n        }\n        return this.goToWhereLogic().then(() => {\n            return this.onWhereEvaluated();\n        })\n    }\n\n    private onWhereEvaluated() {\n        if (this.isOr) {\n            return this.orQuerySuccess_();\n        }\n    }\n\n    private returnResult_ = () => {\n        if (this.results.length > 0) {\n            const query = this.query;\n            if (query.flatten) {\n                const flattendData = [];\n                const indexToDelete = new Map<number, Boolean>();\n                query.flatten.forEach(column => {\n                    this.results.forEach((data, i) => {\n                        data[column].forEach(item => {\n                            flattendData.push(\n                                { ...data, ...{ [column]: item } }\n                            );\n                        });\n                        indexToDelete.set(i, true);\n                    });\n                });\n                let itemsDeleted = 0;\n                indexToDelete.forEach((_, key) => {\n                    this.results.splice(key - itemsDeleted, 1);\n                    ++itemsDeleted;\n                });\n                this.results = this.results.concat(flattendData);\n            }\n            this.processGroupDistinctAggr();\n            this.processOrderBy();\n            if (this.skipAtEnd) {\n                this.results.splice(0, query.skip);\n            }\n            if (this.limitAtEnd) {\n                this.results = this.results.slice(0, query.limit);\n            }\n        }\n        return this.results;\n    }\n\n    private orQueryFinish_() {\n        this.isOr = false;\n        this.results = this.orInfo.results;\n        // free or info memory\n        this.orInfo = null;\n        this.removeDuplicates();\n        // this.onQueryFinished();\n    }\n\n    private orQuerySuccess_() {\n        const query = this.query;\n        if (this.results.length > 0) {\n            this.orInfo.results = [... this.orInfo.results, ...this.results];\n        }\n\n        this.results = [];\n        const key = getObjectFirstKey(this.orInfo.orQuery);\n        if (key != null) {\n            const where = {};\n            where[key] = this.orInfo.orQuery[key];\n            delete this.orInfo.orQuery[key];\n            query.where = where;\n            return this.goToWhereLogic().then(this.onWhereEvaluated.bind(this))\n        }\n        return this.orQueryFinish_();\n    }\n\n    private processOrLogic_() {\n        this.isOr = true;\n        const where = this.query.where as IWhereQuery;\n        this.orInfo = {\n            orQuery: where.or as any,\n            results: []\n        };\n        this.setLimitAndSkipEvaluationAtEnd_();\n        // free or memory\n        delete where.or;\n    }\n}\n\nSelect.prototype.executeInLogic = executeInLogic;\nSelect.prototype.executeWhereUndefinedLogic = executeWhereUndefinedLogic;\nSelect.prototype.executeWhereLogic = executeWhereLogic;\nSelect.prototype.executeRegexLogic = executeRegexLogic;\n\nSelect.prototype.setLimitAndSkipEvaluationAtEnd_ = setLimitAndSkipEvaluationAtEnd\nSelect.prototype.setPushResult = setPushResult;\nSelect.prototype.removeDuplicates = removeDuplicates;\nSelect.prototype.executeJoinQuery = executeJoinQuery\nSelect.prototype.processGroupDistinctAggr = processGroupDistinctAggr;\nSelect.prototype.processOrderBy = processOrderBy;\nSelect.prototype.processAggregateQry = processAggregateQry;\nSelect.prototype.executeAggregateGroupBy = executeAggregateGroupBy;\nSelect.prototype.processGroupBy = processGroupBy;\n","import { promise } from \"@/common\";\nimport { BaseFetch } from \"../base_fetch\";\nimport { Count } from \".\";\n\nexport const executeWhereUndefinedLogic = function (this: BaseFetch) {\n    let countRequest;\n    const objectStore = this.objectStore;\n    const onSuccess = (() => {\n        if (objectStore.count) {\n            countRequest = objectStore.count();\n            return (onFinish) => {\n                return () => {\n                    (this as Count).resultCount = countRequest.result;\n                    onFinish();\n                }\n            }\n        }\n        else {\n            let cursor;\n            countRequest = objectStore.openCursor();\n            return (onFinish) => {\n                return (e: any) => {\n                    cursor = e.target.result;\n                    if (cursor) {\n                        ++(this as Count).resultCount;\n                        cursor.continue();\n                    }\n                    else {\n                        onFinish();\n                    }\n                };\n            };\n        }\n    })();\n    return promise((res, rej) => {\n        countRequest.onerror = rej;\n        countRequest.onsuccess = onSuccess(res);\n    });\n}\n","import { BaseFetch } from \"../base_fetch\";\nimport { getLength } from \"@/worker/utils\";\nimport { Count } from \".\";\nimport { promise } from \"@/common\";\n\nexport const onWhereCount = function (this: BaseFetch, onFinish) {\n    return (e) => {\n        const cursor = e.target.result;\n        if (cursor) {\n            if (this.shouldAddValue(cursor)) {\n                ++(this as Count).resultCount;\n            }\n            cursor.continue();\n        }\n        else {\n            onFinish();\n        }\n    }\n}\n\nexport const executeWhereLogic = function (this: BaseFetch, column, value, op) {\n    value = op ? value[op] : value;\n    let cursorRequest;\n\n    const isWhereKeysLengthOne = getLength(this.query.where) === 1;\n    const objectStore = this.objectStore;\n\n    return promise((res, rej) => {\n        if (isWhereKeysLengthOne && objectStore.count) {\n            cursorRequest = objectStore.index(column).count(this.util.keyRange(value, op));\n            cursorRequest.onsuccess = () => {\n                (this as Count).resultCount = cursorRequest.result;\n                res();\n            }\n        }\n        else {\n            cursorRequest = objectStore.index(column).openCursor(this.util.keyRange(value, op));\n            cursorRequest.onsuccess = onWhereCount.call(this, res);\n        }\n        cursorRequest.onerror = rej;\n    });\n}","import { BaseFetch } from \"../base_fetch\";\nimport { promise } from \"@/common\";\nimport { onWhereCount } from \"./where\";\n\nexport const executeRegexLogic = function (this: BaseFetch, column: string, exp: RegExp) {\n    const cursorRequest = this.objectStore.index(column).openCursor();\n    this.shouldAddValue = (cursor) => {\n        return exp.test(cursor.key) &&\n            this.whereChecker.check(cursor.value);\n    };\n    return promise((res, rej) => {\n        cursorRequest.onerror = rej;\n        cursorRequest.onsuccess = onWhereCount.call(this, res);\n    })\n}","import { promise, promiseAll } from \"@/common\";\nimport { getLength } from \"@/worker/utils\";\nimport { BaseFetch } from \"../base_fetch\";\nimport { onWhereCount } from \"./where\";\n\n\nexport const executeInLogic = function (this: BaseFetch, column, values) {\n    const objectStore = this.objectStore;\n    const columnStore = objectStore.index(column);\n    const isWhereKeysLengthOne = getLength(this.query.where) === 1;\n\n    const runInLogic: (val) => Promise<void> = (value) => {\n        const keyRange = this.util.keyRange(value);\n        if (isWhereKeysLengthOne && objectStore.count) {\n            return promise((res, rej) => {\n                const cursorRequest = columnStore.count(keyRange);\n                cursorRequest.onsuccess = (e: any) => {\n                    this.resultCount += e.target.result;\n                    res();\n                };\n                cursorRequest.onerror = rej;\n            });\n        }\n        return promise<void>((res, rej) => {\n            const cursorRequest = columnStore.openCursor(keyRange);\n            cursorRequest.onsuccess = onWhereCount.call(this, res);\n            cursorRequest.onerror = rej;\n        });\n    };\n\n    return promiseAll<void>(\n        values.map(function (val) {\n            return runInLogic(val);\n        })\n    );\n}\n","import { BaseFetch } from \"@executors/base_fetch\";\nimport { Select } from \"@executors/select\";\nimport { ICountQuery, ISelectQuery, IDB_MODE, API, IWhereQuery } from \"@/common\";\nimport { IDBUtil } from \"@/worker/idbutil\";\nimport { QueryHelper } from \"@executors/query_helper\";\nimport { promiseReject, isArray } from \"@worker/utils\";\nimport { executeWhereUndefinedLogic } from \"@executors/count/not_where\";\nimport { executeWhereLogic } from \"./where\";\nimport { executeRegexLogic } from \"./regex\";\nimport { executeInLogic } from \"./in\";\n\nexport class Count extends BaseFetch {\n\n    query: ICountQuery;\n    resultCount: number = 0;\n    executeWhereUndefinedLogic: typeof executeWhereUndefinedLogic;\n\n    constructor(query: ICountQuery, util: IDBUtil) {\n        super();\n        this.query = query;\n        this.util = util;\n        this.tableName = query.from;\n    }\n\n    execute(beforeExecute: () => Promise<any>) {\n        const queryHelper = new QueryHelper(this.db);\n        const query = this.query;\n        const err = queryHelper.validate(API.Count, query);\n        if (err) {\n            return promiseReject(\n                err\n            );\n        }\n        return beforeExecute().then(_ => {\n            let result: Promise<void>;\n            try {\n                const getDataFromSelect = () => {\n                    const selectInstance = new Select(query as ISelectQuery, this.util);\n                    selectInstance.isTxQuery = this.isTxQuery;\n                    return selectInstance.execute().then(results => {\n                        this.resultCount = results.length;\n                    });\n                };\n                this.initTransaction_();\n                if (query.join == null) {\n                    if (query.where != null) {\n                        if ((query.where as IWhereQuery).or || isArray(query.where)) {\n                            result = getDataFromSelect();\n                        }\n                        else {\n                            this.shouldAddValue = (cursor) => {\n                                return this.whereChecker.check(cursor.value);\n                            };\n                            result = this.goToWhereLogic();\n                        }\n                    }\n                    else {\n                        result = this.executeWhereUndefinedLogic() as any;\n                    }\n                }\n                else {\n                    result = getDataFromSelect();\n                }\n            }\n            catch (ex) {\n                this.onException(ex);\n            }\n            return result.then(_ => {\n                return this.resultCount;\n            })\n        });\n    }\n\n    private initTransaction_() {\n        const tableName = this.query.from;\n        if (!this.isTxQuery) {\n            this.util.createTransaction([tableName], IDB_MODE.ReadOnly);\n        }\n        this.objectStore = this.util.objectStore(tableName);\n    }\n}\n\nCount.prototype.executeWhereUndefinedLogic = executeWhereUndefinedLogic;\nCount.prototype.executeWhereLogic = executeWhereLogic\nCount.prototype.executeRegexLogic = executeRegexLogic\nCount.prototype.executeInLogic = executeInLogic","import { isArray } from \"./is_array\";\n\nexport const variableFromPath = (path: string) => {\n    const properties: string[] = isArray(path) ? path as any : path.split(\".\");\n    return properties.reduce((prev, curr) => prev && prev[curr], self);\n}","import { getDataType, variableFromPath, promiseReject, LogHelper } from \"@worker/utils\";\nimport { DATA_TYPE, ERROR_TYPE, IUpdateQuery } from \"@/common\";\n\nexport const updateValue = (query: IUpdateQuery, storedValue) => {\n    let setValue = query.set;\n    const mapSet = query.mapSet;\n    if (mapSet) {\n        const result = (mapSet as Function)(setValue, storedValue);\n        if (result != null) {\n            setValue = result;\n        }\n    }\n    for (const key in setValue) {\n        const columnSetValue = setValue[key];\n        if (getDataType(columnSetValue) !== DATA_TYPE.Object) {\n            storedValue[key] = columnSetValue;\n        }\n        else {\n            for (const op in columnSetValue) {\n                let value = columnSetValue[op];\n                switch (op as any) {\n                    case '+': storedValue[key] += value; break;\n                    case '-': storedValue[key] -= value; break;\n                    case '*': storedValue[key] *= value; break;\n                    case '/': storedValue[key] /= value; break;\n                    case '{push}': storedValue[key].push(value); break;\n                    default: storedValue[key] = columnSetValue;\n                }\n                break;\n            }\n        }\n    }\n    return storedValue;\n};","import { Update } from \"./\";\nimport { promise } from \"@/common\";\nimport { updateValue } from \"./update_value\";\n\n\nexport const executeWhereUndefinedLogic = function (this: Update) {\n    const cursorRequest: IDBRequest<IDBCursorWithValue> = this.objectStore.openCursor();\n    return promise<void>((res, rej) => {\n        cursorRequest.onsuccess = (e: any) => {\n            const cursor: IDBCursorWithValue = (e as any).target.result;\n            if (cursor) {\n                try {\n                    const cursorUpdateRequest = cursor.update(updateValue(this.query as any, cursor.value));\n                    cursorUpdateRequest.onsuccess = () => {\n                        ++this.rowAffected;\n                        cursor.continue();\n                    };\n                    cursorUpdateRequest.onerror = rej;\n                } catch (ex) {\n                    rej(\n                        ex\n                    );\n                }\n            }\n            else {\n                res();\n            }\n        };\n        cursorRequest.onerror = rej;\n    })\n\n}\n","import { Update } from \"./\";\nimport { promiseAll, promise, IUpdateQuery } from \"@/common\";\nimport { updateValue } from \"./update_value\";\n\n\nexport const executeInLogic = function (this: Update, column, values: any[]) {\n    const columnStore = this.objectStore.index(column);\n    const query: IUpdateQuery = this.query as any;\n    const runInLogic: (val) => Promise<void> = (value) => {\n        return promise((res, rej) => {\n            const cursorRequest = columnStore.openCursor(this.util.keyRange(value));\n            cursorRequest.onsuccess = (e: any) => {\n                const cursor: IDBCursorWithValue = e.target.result;\n                if (cursor) {\n                    const value = cursor.value;\n                    if (this.whereChecker.check(value)) {\n                        try {\n                            const cursorUpdateRequest = cursor.update(updateValue(query, value));\n                            cursorUpdateRequest.onsuccess = () => {\n                                ++this.rowAffected;\n                                cursor.continue();\n                            };\n                            cursorUpdateRequest.onerror = rej;\n                        }\n                        catch (ex) {\n                            rej(\n                                ex\n                            );\n                        }\n\n                    }\n                    else {\n                        cursor.continue();\n                    }\n                }\n                else {\n                    res();\n                }\n            };\n            cursorRequest.onerror = rej;\n        });\n    };\n\n    return promiseAll<void>(\n        values.map(function (val) {\n            return runInLogic(val);\n        })\n    );\n}\n","import { Update } from \"./\";\nimport { updateValue } from \"./update_value\";\nimport { promise } from \"@/common\";\n\nexport const executeRegexLogic = function (this: Update, column: string, exp: RegExp) {\n    let cursor: IDBCursorWithValue;\n    const cursorOpenRequest = this.objectStore.index(column).openCursor();\n    this.shouldAddValue = (cursor) => {\n        return exp.test(cursor.key) &&\n            this.whereChecker.check(cursor.value);\n    };\n    return promise<void>((res, rej) => {\n\n        cursorOpenRequest.onsuccess = (e: any) => {\n            cursor = e.target.result;\n            if (cursor) {\n                if (this.shouldAddValue(cursor)) {\n                    try {\n                        const cursorUpdateRequest = cursor.update(updateValue(this.query as any, cursor.value));\n                        cursorUpdateRequest.onsuccess = () => {\n                            ++this.rowAffected;\n                            cursor.continue();\n                        };\n                        cursorUpdateRequest.onerror = rej;\n                    } catch (ex) {\n                        rej(\n                            ex\n                        );\n                    }\n                }\n                else {\n                    cursor.continue();\n                }\n\n            }\n            else {\n                res();\n            }\n        };\n        cursorOpenRequest.onerror = rej;\n    })\n\n}\n","import { promise, IUpdateQuery } from \"@/common\";\nimport { updateValue } from \"./update_value\";\nimport { Update } from \"./\";\n\nexport const executeWhereLogic = function (this: Update, column, value, op) {\n    const query: IUpdateQuery = this.query as any;\n    value = op ? value[op] : value;\n    const cursorRequest = this.objectStore.index(column).openCursor(this.util.keyRange(value, op));\n    return promise<void>((res, rej) => {\n        cursorRequest.onsuccess = (e: any) => {\n            const cursor: IDBCursorWithValue = e.target.result;\n            if (cursor) {\n                if (this.whereChecker.check(cursor.value)) {\n                    try {\n                        const cursorUpdateRequest = cursor.update(updateValue(query, cursor.value));\n                        cursorUpdateRequest.onsuccess = () => {\n                            ++this.rowAffected;\n                            cursor.continue();\n                        };\n                        cursorUpdateRequest.onerror = rej;\n                    } catch (ex) {\n                        rej(\n                            ex\n                        );\n                    }\n                }\n                else {\n                    cursor.continue();\n                }\n            }\n            else {\n                res();\n            }\n        };\n        cursorRequest.onerror = rej\n    })\n}","import { IUpdateQuery, ISelectQuery, QUERY_OPTION, API, IWhereQuery, DATA_TYPE, ERROR_TYPE } from \"@/common\";\nimport { IDBUtil } from \"@/worker/idbutil\";\nimport { DbMeta } from \"@worker/model\";\nimport { QueryHelper } from \"../query_helper\";\nimport { promiseReject, isArray, getDataType, variableFromPath, LogHelper } from \"@worker/utils\";\nimport { BaseFetch } from \"@executors/base_fetch\";\nimport { Select } from \"@executors/select\";\nimport { executeWhereUndefinedLogic } from \"./not_where\";\nimport { executeInLogic } from \"./in\";\nimport { executeRegexLogic } from \"./regex\";\nimport { executeWhereLogic } from \"./where\";\n\nexport class Update extends BaseFetch {\n    executeWhereUndefinedLogic: typeof executeWhereUndefinedLogic\n\n    constructor(query: IUpdateQuery, util: IDBUtil) {\n        super();\n        this.query = query as any;\n        this.util = util;\n        this.tableName = query.in;\n        const mapSet = query.mapSet;\n        if (mapSet) {\n            const method = getDataType(mapSet) === DATA_TYPE.String ?\n                variableFromPath(mapSet as string) : mapSet;\n            if (!method) {\n                throw new LogHelper(ERROR_TYPE.MethodNotExist, mapSet);\n            }\n            query.mapSet = method;\n        }\n\n    }\n\n    execute(beforeExecute: () => Promise<any>) {\n        const query: IUpdateQuery = this.query as any;\n        try {\n            const queryHelper = new QueryHelper(this.db);\n            const err = queryHelper.validate(API.Update, query);\n            if (err) return promiseReject(err);\n            return beforeExecute().then(_ => {\n                this.initTransaction();\n                let pResult: Promise<void>;\n                if (query.where != null) {\n                    if ((query.where as IWhereQuery).or || isArray(query.where)) {\n                        pResult = this.executeComplexLogic_();\n                    }\n                    else {\n                        pResult = this.goToWhereLogic();\n                    }\n                }\n                else {\n                    pResult = this.executeWhereUndefinedLogic();\n                }\n                return pResult.then(() => {\n                    return this.rowAffected;\n                })\n            })\n        }\n        catch (ex) {\n            return this.onException(ex);\n        }\n    }\n\n    private executeComplexLogic_() {\n        const query: IUpdateQuery = this.query as any;\n        const selectObject = new Select({\n            from: query.in,\n            where: query.where,\n            ignoreCase: query.ignoreCase\n        } as ISelectQuery, this.util);\n        selectObject.isTxQuery = this.isTxQuery;\n        return selectObject.execute().then((results: any[]) => {\n            const key = this.primaryKey(query.in);\n            const inQuery = [];\n            results.forEach((value) => {\n                inQuery.push(value[key]);\n            });\n            results = null;\n            const whereQry = { [key]: { [QUERY_OPTION.In]: inQuery } };\n            this.query.where = whereQry;\n            this.initTransaction();\n            return this.goToWhereLogic();\n        });\n    }\n\n    private initTransaction() {\n        const tableName = (this.query as any).in;\n        if (!this.isTxQuery) {\n            this.util.createTransaction([tableName]);\n        }\n        this.objectStore = this.util.objectStore(tableName);\n    }\n}\n\nUpdate.prototype.executeWhereUndefinedLogic = executeWhereUndefinedLogic;\nUpdate.prototype.executeWhereLogic = executeWhereLogic\nUpdate.prototype.executeRegexLogic = executeRegexLogic\nUpdate.prototype.executeInLogic = executeInLogic","import { IIntersectQuery, ISelectQuery } from \"@/common\";\nimport { Base } from \"@executors/base\";\nimport { Select } from \"@executors/select\";\n\nexport class Intersect extends Base {\n\n    constructor(intersectQry: IIntersectQuery, util) {\n        super();\n        this.query = intersectQry as any;\n        this.util = util;\n    }\n\n    execute() {\n        const intersectQry: IIntersectQuery = this.query as any;\n        let index = 0;\n        let hashMap = {};\n        let hashMapTemp = {};\n        let isQueryForSameTable = true;\n        const queries = intersectQry.queries;\n        const queryLength = queries.length;\n        queries.every((qry, i) => {\n            if (i + 1 < queryLength && qry.from !== queries[i + 1].from) {\n                isQueryForSameTable = false;\n                return false;\n            }\n            return true;\n        });\n        let getHashKey;\n        if (isQueryForSameTable) {\n            const pKey = this.primaryKey(queries[0].from);\n            getHashKey = (val) => {\n                return val[pKey];\n            };\n        }\n        else {\n            getHashKey = (val) => {\n                let columnValKey = \"\";\n                for (const key in val) {\n                    columnValKey += val[key];\n                }\n                return columnValKey;\n            };\n        }\n\n        let select: Select;\n        const fetchData = () => {\n            if (index < queryLength) {\n                select = new Select(queries[index], this.util);\n                return select.execute().then((selectResult) => {\n                    hashMap = {};\n                    selectResult.forEach(val => {\n                        const columnValKey = getHashKey(val);\n                        if (index === 0) {\n                            hashMapTemp[columnValKey] = val;\n                        } else if (hashMapTemp[columnValKey] != null) {\n                            hashMap[columnValKey] = val;\n                        }\n                    });\n                    if (index > 0) {\n                        hashMapTemp = { ...hashMap };\n                    }\n\n                    ++index;\n                    return fetchData();\n                })\n            }\n            else {\n                const results = [];\n                let resultPusher: (key: string) => void;\n                let skip = intersectQry.skip;\n                const limit = intersectQry.limit;\n                const onFinished = () => {\n                    select['results'] = results;\n                    Object.assign(select.query, {\n                        order: intersectQry.order,\n                        join: {} as any\n                    } as ISelectQuery);\n                    select.processOrderBy();\n                    select.processGroupDistinctAggr();\n                    return (select['results']);\n                };\n                let shouldStopLoop = false;\n                let key: string;\n                const pushResult = () => {\n                    results.push(hashMap[key]);\n                };\n                const checkLimitAndPush = () => {\n                    if (results.length < limit) {\n                        pushResult();\n                    }\n                    else {\n                        shouldStopLoop = true;\n                    }\n                };\n                const skipChecker = (callBack: () => void) => {\n                    if (skip === 0) {\n                        callBack();\n                    }\n                    else {\n                        --skip;\n                    }\n                };\n                if (intersectQry.skip && intersectQry.limit) {\n                    resultPusher = () => {\n                        skipChecker(() => {\n                            checkLimitAndPush();\n                        });\n                    };\n\n                }\n                else if (intersectQry.limit) {\n                    resultPusher = checkLimitAndPush;\n                }\n                else if (intersectQry.skip) {\n                    resultPusher = () => {\n                        skipChecker(() => {\n                            pushResult();\n                        });\n                    };\n                }\n                else {\n                    resultPusher = () => {\n                        pushResult();\n                    };\n                }\n                if (limit) {\n                    for (key in hashMap) {\n                        resultPusher(key);\n                        if (shouldStopLoop) {\n                            break;\n                        }\n                    }\n                }\n                else {\n                    for (key in hashMap) {\n                        resultPusher(key);\n                    }\n                }\n                return onFinished();\n            }\n        };\n        return fetchData();\n    }\n}","import { LogHelper, getError } from \"@worker/utils\";\nimport { ERROR_TYPE, promise } from \"@/common\";\n\nexport class DropDb {\n\n    execute(dbName: string) {\n        return promise((res, rej) => {\n            const dropDbRequest = indexedDB.deleteDatabase(dbName);\n            dropDbRequest.onblocked = () => {\n                const err = new LogHelper(ERROR_TYPE.DbBlocked);\n                return rej(\n                    getError(err)\n                );\n            };\n            dropDbRequest.onerror = (e) => {\n                return rej(\n                    getError(e)\n                )\n            };\n            dropDbRequest.onsuccess = () => {\n                res();\n            };\n        })\n    }\n}\n","import { Base } from \"@executors/base\";\nimport { ISelectQuery } from \"@/common\";\nimport { Select } from \"@executors/select\";\nimport { IDBUtil } from \"@/worker/idbutil\";\n\nexport class Union extends Base {\n\n    constructor(query: ISelectQuery[], util: IDBUtil) {\n        super();\n        this.query = query as any;\n        this.util = util;\n    }\n\n    execute() {\n        const query: ISelectQuery[] = this.query as any;\n        let index = 0;\n        const hashMap = new Map();\n        let isQueryForSameTable = true;\n        const queryLength = query.length;\n        query.every((qry, i) => {\n            if (i + 1 < queryLength && qry.from !== query[i + 1].from) {\n                isQueryForSameTable = false;\n                return false;\n            }\n            return true;\n        });\n        let getHashKey;\n        if (isQueryForSameTable) {\n            const pKey = this.primaryKey(query[0].from);\n            getHashKey = (val) => {\n                return val[pKey];\n            };\n        }\n        else {\n            getHashKey = (val) => {\n                let columnValKey = \"\";\n                for (const key in val) {\n                    columnValKey += val[key];\n                }\n                return columnValKey;\n            };\n        }\n        let select: Select;\n        const fetchData = () => {\n            if (index < query.length) {\n                select = new Select(query[index++], this.util);\n                return select.execute().then((selectResult) => {\n                    selectResult.forEach(val => {\n                        hashMap.set(getHashKey(val), val);\n                    });\n                    return fetchData();\n                })\n            }\n            else {\n                return Array.from(hashMap.values());\n            }\n        };\n        return fetchData();\n    }\n\n\n}","import { Remove } from \".\";\nimport { promise } from \"@/common\";\n\nexport const executeWhereUndefinedLogic = function (this: Remove) {\n    let cursor;\n    const cursorRequest = this.objectStore.openCursor();\n    return promise<void>((res, rej) => {\n        cursorRequest.onsuccess = (e: any) => {\n            cursor = e.target.result;\n            if (cursor) {\n                cursor.delete();\n                ++this.rowAffected;\n                (cursor as any).continue();\n            }\n            else {\n                res();\n            }\n        };\n        cursorRequest.onerror = rej;\n    })\n\n}\n","import { Remove } from \".\";\nimport { promise } from \"@/common\";\n\nexport const onWhereRemove = function (this: Remove, onFinish) {\n    return (e) => {\n        const cursor: IDBCursorWithValue = e.target.result;\n        if (cursor) {\n            if (this.shouldAddValue(cursor.value)) {\n                cursor.delete();\n                ++this.rowAffected;\n            }\n            cursor.continue();\n        }\n        else {\n            onFinish();\n        }\n    };\n}\n\nexport const executeWhereLogic = function (this: Remove, column, value, op) {\n    value = op ? value[op] : value;\n    const cursorRequest = this.objectStore.index(column).openCursor(this.util.keyRange(value, op));\n\n\n    return promise<void>((res, rej) => {\n        cursorRequest.onsuccess = onWhereRemove.call(this, res);\n        cursorRequest.onerror = rej\n    })\n\n}\n\n","import { Remove } from \".\";\nimport { promise, promiseAll } from \"@/common\";\nimport { onWhereRemove } from \"./where\";\n\nexport const executeInLogic = function (this: Remove, column, values) {\n    const columnIndex = this.objectStore.index(column)\n    const runInLogic: (val) => Promise<void> = (value) => {\n        return promise((res, rej) => {\n            const cursorRequest = columnIndex.openCursor(this.util.keyRange(value));\n            cursorRequest.onsuccess = onWhereRemove.call(this, res);\n            cursorRequest.onerror = rej;\n        });\n    };\n\n    return promiseAll<void>(\n        values.map(function (val) {\n            return runInLogic(val);\n        })\n    );\n}\n","import { Remove } from \"./\";\nimport { promise } from \"@/common\";\n\nexport const executeRegexLogic = function (this: Remove, column: string, exp: RegExp) {\n    let cursor: IDBCursorWithValue;\n    const cursorRequest = this.objectStore.index(column).openCursor();\n    this.shouldAddValue = (cursor) => {\n        return exp.test(cursor.key) &&\n            this.whereChecker.check(cursor.value);\n    };\n    return promise<void>((res, rej) => {\n        cursorRequest.onsuccess = (e: any) => {\n            cursor = e.target.result;\n            if (cursor) {\n                if (this.shouldAddValue(cursor)) {\n                    cursor.delete();\n                    ++this.rowAffected;\n                }\n                cursor.continue();\n            }\n            else {\n                res();\n            }\n        };\n        cursorRequest.onerror = rej;\n    })\n\n}","import { BaseFetch } from \"../base_fetch\";\nimport { IRemoveQuery, QUERY_OPTION, API, IWhereQuery } from \"@/common\";\nimport { IDBUtil } from \"@/worker/idbutil\";\nimport { QueryHelper } from \"@executors/query_helper\";\nimport { promiseReject, isArray, getObjectFirstKey } from \"@/worker/utils\";\nimport { Select } from \"@executors/select\";\nimport { executeWhereUndefinedLogic } from \"./not_where\";\nimport { executeInLogic } from \"./in\";\nimport { executeWhereLogic } from \"./where\";\nimport { executeRegexLogic } from \"./regex\";\n\nexport class Remove extends BaseFetch {\n    isOr;\n    executeWhereUndefinedLogic;\n\n    constructor(\n        query: IRemoveQuery, util: IDBUtil\n    ) {\n        super();\n        this.query = query;\n        this.util = util;\n        this.tableName = query.from;\n    }\n\n    execute(beforeExecute: () => Promise<any>) {\n        const queryHelper = new QueryHelper(this.db);\n        const query = this.query;\n        const err = queryHelper.validate(API.Remove, query);\n        if (err) return promiseReject(\n            err\n        );\n        let pResult: Promise<void>;\n        return beforeExecute().then(_ => {\n            try {\n                this.initTransaction_();\n                if (query.where != null) {\n                    if (isArray(query.where)) {\n                        pResult = this.processWhereArrayQry();\n                    }\n                    else {\n                        pResult = this.processWhere_();\n                    }\n                }\n                else {\n                    pResult = this.executeWhereUndefinedLogic();\n                }\n\n            }\n            catch (ex) {\n                return this.onException(ex);\n            }\n            return pResult.then(() => {\n                return this.rowAffected;\n            })\n        })\n    }\n\n    private processWhereArrayQry() {\n        const selectObject = new Select(this.query, this.util);\n        selectObject.isTxQuery = this.isTxQuery;\n        return selectObject.execute().then((results) => {\n            const keyList = [];\n            const pkey = this.primaryKey(this.query.from);\n            results.forEach((item) => {\n                keyList.push(item[pkey]);\n            });\n            results = null;\n            const whereQry = { [pkey]: { [QUERY_OPTION.In]: keyList } };\n            this.query[QUERY_OPTION.Where] = whereQry;\n            return this.processWhere_();\n        })\n    }\n\n    private processWhere_() {\n        this.shouldAddValue = (value) => {\n            return this.whereChecker.check(value);\n        };\n        if ((this.query.where as IWhereQuery).or) {\n            this.processOrLogic();\n        }\n        return this.goToWhereLogic().then(() => {\n            return this.onWhereEvaluated();\n        });\n    }\n\n    private initTransaction_() {\n        if (!this.isTxQuery) {\n            this.util.createTransaction([this.query.from]);\n        }\n        this.objectStore = this.util.objectStore(this.query.from);\n    }\n\n    private onWhereEvaluated() {\n        if (this.isOr) {\n            return this.orQuerySuccess_();\n        }\n    }\n\n    private orQuerySuccess_() {\n        const orQueryFromOrInfo = (this as any)._orInfo.OrQuery\n        const key = getObjectFirstKey(orQueryFromOrInfo);\n        if (key != null) {\n            const where = {};\n            where[key] = orQueryFromOrInfo[key];\n            delete orQueryFromOrInfo[key];\n            this.query.where = where;\n            return this.goToWhereLogic().then(() => {\n                return this.onWhereEvaluated();\n            })\n        }\n        else {\n            this.isOr = true;\n        }\n    }\n\n    private processOrLogic() {\n        this.isOr = true;\n        const where = this.query.where as IWhereQuery;\n        (this as any)._orInfo = {\n            OrQuery: where.or\n        };\n\n        // free or memory\n        delete where.or;\n    }\n}\n\nRemove.prototype.executeInLogic = executeInLogic;\nRemove.prototype.executeWhereUndefinedLogic = executeWhereUndefinedLogic;\nRemove.prototype.executeWhereLogic = executeWhereLogic;\nRemove.prototype.executeRegexLogic = executeRegexLogic;","import { Base } from \"@executors/base\";\nimport { IDBUtil } from \"@/worker/idbutil\";\nimport { MetaHelper } from \"@/worker/meta_helper\";\nimport { promise } from \"@/common\";\n\nexport class Clear extends Base {\n    constructor(tableName: string, util: IDBUtil) {\n        super();\n        this.query = tableName as any;\n        this.util = util;\n        this.tableName = tableName;\n    }\n\n    execute(beforeExecute: () => Promise<any>) {\n        const tableName: string = this.query as any;\n        if (!this.isTxQuery) {\n            this.util.createTransaction([tableName, MetaHelper.tableName]);\n        }\n        return beforeExecute().then(_ => {\n            const clearRequest: IDBRequest = this.util.objectStore(tableName).clear();\n            try {\n                return promise<void>((res, rej) => {\n                    clearRequest.onsuccess = (e) => {\n                        const currentTable = this.table(tableName);\n                        for (const columnName in currentTable.autoIncColumnValue) {\n                            currentTable.autoIncColumnValue[columnName] = 0;\n                        }\n                        MetaHelper.set(MetaHelper.dbSchema, this.util.db, this.util).then(res).catch(rej);\n                    };\n\n                    clearRequest.onerror = rej;\n                })\n            }\n            catch (ex) {\n                return this.onException(ex);\n            }\n        })\n    }\n}","import { Base } from \"@executors/base\";\nimport { ITranscationQuery, WebWorkerRequest, ERROR_TYPE, API, WebWorkerResult, promise } from \"@/common\";\nimport { IDBUtil } from \"@worker/idbutil\";\nimport { promiseReject, LogHelper, variableFromPath } from \"@worker/utils\";\nimport { Insert } from \"@executors/insert\";\nimport { Select } from \"@executors/select\";\nimport { Count } from \"@executors/count\";\nimport { Update } from \"@executors/update\";\nimport { Remove } from \"@executors/remove\";\nimport { IQueryExecutor } from \"@/worker/interfaces\";\nimport { MetaHelper } from \"@/worker/meta_helper\";\n\nexport class Transaction extends Base {\n    results = {} as any;\n    reqQueue: WebWorkerRequest[] = [];\n    isQueryExecuting = false;\n\n    isTxStarted_ = false;\n\n    onSuccess: (result: any) => void;\n    onError: (err: LogHelper) => void;\n\n    beforeExecute: () => Promise<void>;\n\n    constructor(qry: ITranscationQuery, util: IDBUtil) {\n        super();\n        this.query = qry as any;\n        this.util = util;\n    }\n\n    execute(cb: () => Promise<void>) {\n        this.beforeExecute = cb;\n        const err = this.validate();\n        if (err) return promiseReject(\n            err\n        );\n        this.startExecution_()\n\n        return promise<void>((res, rej) => {\n            this.onSuccess = res;\n            this.onError = rej;\n        }).then(result => {\n            this.beforeExecute = null;\n            this.log(`transaction finished`);\n            return result;\n        })\n    }\n\n    validate() {\n        const query: ITranscationQuery = this.query as any;\n        const notExistingTable = this.notExistingTable_(query.tables);\n        if (notExistingTable) {\n            return new LogHelper(ERROR_TYPE.TableNotExist, { tableName: notExistingTable });\n        }\n        const methodName = query.method;\n        let txLogic = variableFromPath(methodName);\n        if (!txLogic) {\n            return new LogHelper(ERROR_TYPE.MethodNotExist, methodName);\n        }\n    }\n\n    private startExecution_() {\n        const query: ITranscationQuery = this.query as any;\n        const createPusher = (api: any) => {\n            return (qry) => {\n                return this.pushReq_({\n                    name: api,\n                    query: qry\n                } as WebWorkerRequest);\n            }\n        };\n        const setResult = (key: string, value) => {\n            this.results[key] = value;\n        };\n        const getResult = (key: string) => {\n            return this.results[key];\n        };\n        const abort = (msg: string) => {\n            this.abortTx_(msg);\n        };\n\n        const start = () => {\n            this.startTx_();\n        };\n        const methodName = query.method\n        let txLogic = variableFromPath(methodName);\n\n        this.log(`transaction query started`);\n\n        return txLogic.call(\n            this,\n            {\n                data: query.data,\n                insert: createPusher(API.Insert),\n                select: createPusher(API.Select),\n                update: createPusher(API.Update),\n                remove: createPusher(API.Remove),\n                count: createPusher(API.Count),\n                setResult: setResult,\n                getResult: getResult, abort: abort,\n                start: start\n            }\n        );\n    }\n\n    log(message) {\n        this.util.logger.log(message);\n    }\n\n    private startTx_() {\n        try {\n            this.isTxStarted_ = true;\n            let tableNames = (this.query as any).tables as string[];\n            tableNames = tableNames.concat(MetaHelper.tableName)\n            this.util.createTransaction(tableNames).then(_ => {\n                this.onSuccess(this.results);\n            }).catch(err => {\n                this.onError(err);\n            })\n            return this.processExecutionOfQry_();\n        }\n        catch (ex) {\n            this.onError(this.onException(ex) as any);\n        }\n    }\n\n\n\n\n\n    private onReqFinished_(result) {\n        const finisehdRequest = this.reqQueue.shift();\n\n        this.log(`finished request : ${finisehdRequest.name} `);\n\n        if (finisehdRequest) {\n            if (result.error) {\n                this.abortTx_(\"automatic abort of transaction due to error occured\");\n                this.log(`transaction aborted due to error occured`);\n                this.onError(result.error);\n            }\n            else {\n                this.isQueryExecuting = false;\n                if (finisehdRequest.onSuccess) {\n                    finisehdRequest.onSuccess(result);\n                }\n                this.processExecutionOfQry_();\n            }\n        }\n    }\n\n    private abortTx_(msg: string) {\n        this.reqQueue = [];\n        this.util.abortTransaction();\n        this.log(`transaction aborted. Msg : ${msg}`);\n\n    }\n\n    private executeRequest_(request: WebWorkerRequest) {\n        this.isQueryExecuting = true;\n        let requestObj: IQueryExecutor;\n        this.log(`executing request : ${request.name} `);\n        const onReqFinished = this.onReqFinished_.bind(this);\n        const query = request.query;\n\n        const callAPI = (api: typeof Select) => {\n            requestObj = new api(\n                query, this.util\n            );\n        };\n\n        switch (request.name) {\n            case API.Select:\n                callAPI(Select);\n                break;\n            case API.Insert:\n                callAPI(Insert as any);\n                break;\n            case API.Update:\n                callAPI(Update as any);\n                break;\n            case API.Remove:\n                callAPI(Remove as any);\n                break;\n            case API.Count:\n                callAPI(Count as any);\n                break;\n        }\n        requestObj.isTxQuery = true;\n        requestObj.execute(this.beforeExecute).then(onReqFinished).catch(err => {\n            const result = {\n                error: err\n            } as WebWorkerResult;\n            onReqFinished(result);\n        })\n    }\n\n    private pushReq_(request: WebWorkerRequest) {\n        const promiseObj = promise((resolve, reject) => {\n            request.onSuccess = (result) => {\n                resolve(result);\n            };\n            request.onError = (error) => {\n                reject(error);\n            };\n        });\n        this.reqQueue.push(request);\n        if (this.isTxStarted_ === true) {\n            this.processExecutionOfQry_();\n        }\n\n        this.log(`request pushed : ${request.name}`);\n        return promiseObj;\n    }\n\n    private processExecutionOfQry_() {\n        if (this.isQueryExecuting === false) {\n            if (this.reqQueue.length > 0) {\n                this.executeRequest_(this.reqQueue[0]);\n            }\n        }\n    }\n\n    private notExistingTable_(tables: string[]) {\n        let invalidTable: string = null;\n        tables.every(tableName => {\n            const table = this.table(tableName);\n            if (table == null) {\n                invalidTable = tableName;\n                return false;\n            }\n            return true;\n        });\n        return invalidTable;\n    }\n}","import { DbMeta } from \"@worker/model\";\nimport { IDataBase, ITable } from \"@/common\";\n\nexport const userDbSchema = (db: DbMeta) => {\n    const database = {\n        name: db.name,\n        version: db.version,\n        tables: []\n    } as IDataBase;\n    db.tables.forEach(table => {\n        const tableAsObj = {\n            name: table.name,\n            columns: {}\n        } as ITable;\n        table.columns.forEach(column => {\n            tableAsObj.columns[column.name] = column;\n        });\n        database.tables.push(tableAsObj);\n    })\n    return database;\n}","import { WebWorkerRequest, promiseResolve, API, IDataBase, WebWorkerResult, promise, ERROR_TYPE, IDbInfo } from \"@/common\";\nimport { DbMeta } from \"./model\";\nimport { IDBUtil } from \"./idbutil\";\nimport { Insert } from \"@executors/insert\";\nimport { IS_WORKER, IS_IDB_SUPPORTED } from \"./constants\";\nimport { MetaHelper } from \"./meta_helper\";\nimport { Select } from \"@executors/select\";\nimport { Count } from \"@executors/count\";\nimport { Update } from \"@executors/update\";\nimport { Intersect } from \"./intersect\";\nimport { DropDb } from \"@executors/drop_db\";\nimport { Union } from \"./union\";\nimport { Remove } from \"@executors/remove\";\nimport { Clear } from \"@executors/clear\";\nimport { Transaction } from \"@executors/transaction\";\nimport { LogHelper, getError, promiseReject, variableFromPath, userDbSchema, getLength } from \"@worker/utils\";\n\nexport class QueryManager {\n    util: IDBUtil;\n\n    get db() {\n        return this.util.db;\n    }\n\n    middlewares: string[] = [];\n\n    private onQryFinished;\n\n    protected get logger() {\n        return this.util.logger;\n    }\n\n    constructor(fn?: (result: any) => void) {\n        this.util = new IDBUtil();\n        this.onQryFinished = IS_WORKER ? (result) => {\n            self.postMessage(result);\n        } : fn;\n    }\n\n    private executeMiddleware_(request: WebWorkerRequest) {\n        const lastIndex = (getLength(this.middlewares) as any) - 1;\n        if (lastIndex < 0) {\n            return promiseResolve();\n        }\n        const middlewareContext = {};\n        const db = this.db;\n        Object.defineProperty(middlewareContext, 'database', {\n            get() {\n                return userDbSchema(db);\n            }\n        });\n        return promise<void>((res) => {\n            let index = 0;\n            const callNextMiddleware = () => {\n                if (index <= lastIndex) {\n                    let promiseResult = variableFromPath(this.middlewares[index++])(request, middlewareContext);\n                    if (!promiseResult || !promiseResult.then) {\n                        promiseResult = Promise.resolve(promiseResult);\n                    }\n                    promiseResult.then(_ => {\n                        callNextMiddleware();\n                    });\n                }\n                else {\n                    res();\n                }\n            };\n            callNextMiddleware();\n        });\n    }\n\n    executeQuery(request: WebWorkerRequest, cb: () => Promise<any>) {\n        let queryResult: Promise<any>;\n        const query = request.query;\n        const ctx = this;\n        const idbutil = ctx.util;\n        const callAPI = (api: typeof Select, beforeExecute?: () => Promise<any>) => {\n            queryResult = new api(query, idbutil).\n                execute(beforeExecute);\n        };\n        switch (request.name) {\n            case API.OpenDb:\n                cb();\n                queryResult = ctx.openDb(query);\n                break;\n            case API.InitDb:\n                cb();\n                queryResult = ctx.initDb(query);\n                break;\n            case API.CloseDb:\n                cb();\n                queryResult = ctx.closeDb();\n                break;\n            case API.Insert:\n                callAPI(Insert as any, cb);\n                break;\n            case API.Select:\n                callAPI(Select as any, cb);\n                break;\n            case API.Count:\n                callAPI(Count as any, cb);\n                break;\n            case API.Update:\n                callAPI(Update as any, cb);\n                break;\n            case API.Intersect:\n                cb();\n                callAPI(Intersect as any);\n                break;\n            case API.DropDb:\n                cb();\n                queryResult = ctx.dropDb();\n                break;\n            case API.Terminate:\n                cb();\n                queryResult = ctx.terminate();\n                break;\n            case API.Union:\n                cb();\n                callAPI(Union as any);\n                break;\n            case API.Remove:\n                callAPI(Remove as any, cb);\n                break;\n            case API.Clear:\n                callAPI(Clear as any, cb);\n                break;\n            case API.Transaction:\n                callAPI(Transaction as any, cb);\n                break;\n            case API.Get:\n                cb();\n                queryResult = MetaHelper.get(query as string, idbutil);\n                break;\n            case API.Set:\n                cb();\n                queryResult = MetaHelper.set(query.key, query.value, idbutil);\n                break;\n            case API.ImportScripts:\n                cb();\n                queryResult = ctx.importScripts_(request);\n                break;\n            case API.ChangeLogStatus:\n                cb();\n                ctx.logger.status = query;\n                queryResult = Promise.resolve();\n                break;\n            case API.Middleware:\n                cb();\n                const value = variableFromPath(query);\n                if (!value) {\n                    return promiseReject(\n                        new LogHelper(ERROR_TYPE.InvalidMiddleware, query)\n                    );\n                }\n                ctx.middlewares.push(query);\n                return promiseResolve();\n            default:\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error('The Api:-' + request.name + ' does not support.');\n                }\n                queryResult = promiseResolve();\n        }\n        ctx.logger.log(`Executing query ${request.name} in web worker`);\n        return queryResult;\n    }\n\n    private callMiddleware_(middlewares: any[], result?) {\n        return promise<any>((res) => {\n            let index = 0;\n            const lastIndex = (getLength(middlewares) as any) - 1;\n            const callNextMiddleware = () => {\n                if (index <= lastIndex) {\n                    let promiseResult = middlewares[index++](result);\n                    if (!(promiseResult instanceof Promise)) {\n                        promiseResult = promiseResolve(promiseResult);\n                    }\n                    promiseResult.then(modifiedResult => {\n                        result = modifiedResult;\n                        callNextMiddleware();\n                    });\n                }\n                else {\n                    res(result);\n                }\n            };\n            callNextMiddleware();\n        });\n    }\n\n    run(request: WebWorkerRequest) {\n        let onResultCallback = [];\n        const beforeExecuteCallback = [];\n        request.onResult = (cb) => {\n            onResultCallback.push((result) => {\n                return cb(result);\n            });\n        };\n        request.beforeExecute = (cb) => {\n            beforeExecuteCallback.push((result) => {\n                return cb(result);\n            });\n        };\n        this.executeMiddleware_(request).then(_ => {\n            return this.executeQuery(request, () => {\n                return this.callMiddleware_(beforeExecuteCallback);\n            }).then((result) => {\n                return this.callMiddleware_(onResultCallback, result).then(modifiedResult => {\n                    this.returnResult_({\n                        result: modifiedResult\n                    });\n                });\n            });\n        }).catch(ex => {\n            onResultCallback = [];\n            const err = getError(ex);\n            const result = {\n                error: err\n            } as WebWorkerResult;\n            this.returnResult_(result);\n        });\n    }\n\n    private importScripts_(request: WebWorkerRequest) {\n        return promise<void>((res, rej) => {\n            try {\n                importScripts(...request.query);\n                res();\n            } catch (e) {\n                const err = new LogHelper(ERROR_TYPE.ImportScriptsFailed, e.message);\n                rej(err);\n            }\n        });\n    }\n\n    private returnResult_(result: WebWorkerResult) {\n        this.logger.log(`Query finished inside web worker`);\n        if (this.util) {\n            this.util.emptyTx();\n        }\n        this.onQryFinished(result);\n    }\n\n    private dropDb() {\n        const dbName = this.db.name;\n        return this.terminate().then(() => {\n            return new DropDb().execute(dbName);\n        });\n    }\n\n    closeDb() {\n        return this.util.close();\n    }\n\n    terminate() {\n        return this.closeDb().then(() => {\n            this.util.db = null;\n        });\n    }\n\n    openDb(query: IDbInfo) {\n        return this.closeDb().then(_ => {\n            let pResult: Promise<boolean>;\n            if (this.db && query.name === this.db.name) {\n                pResult = this.initDb();\n            }\n            else {\n                pResult = this.initDb({\n                    name: query.name,\n                    tables: [\n                    ],\n                    version: query.version\n                });\n            }\n            return pResult.then(() => {\n                return this.db;\n            });\n        });\n    }\n\n    initDb(dataBase?: IDataBase) {\n        if (!IS_IDB_SUPPORTED) {\n            return promiseReject(\n                new LogHelper(ERROR_TYPE.IndexedDbNotSupported)\n            );\n        }\n\n        const dbMeta = dataBase ? new DbMeta(dataBase) : this.db;\n        this.util = new IDBUtil();\n\n        return promise<boolean>((res, rej) => {\n            this.util.initDb(dbMeta).then((dbInfo) => {\n                if (dbInfo.isCreated) {\n                    MetaHelper.get(\n                        MetaHelper.dbSchema,\n                        this.util\n                    ).then((dbFromCache: DbMeta) => {\n                        if (dbFromCache) {\n                            dbFromCache.tables.forEach((tableFromCache, index) => {\n                                const targetTable = dbMeta.tables.find(q => q.name === tableFromCache.name);\n                                if (targetTable) {\n                                    for (const key in tableFromCache.autoIncColumnValue) {\n                                        const savedAutoIncrementValue = tableFromCache.autoIncColumnValue[key];\n                                        if (savedAutoIncrementValue) {\n                                            targetTable.autoIncColumnValue[key] = savedAutoIncrementValue;\n                                        }\n                                    }\n                                }\n                            });\n                        }\n                        this.util.db = dbMeta;\n                        dbInfo.database = userDbSchema(this.db);\n                        MetaHelper.set(\n                            MetaHelper.dbSchema, dbMeta,\n                            this.util\n                        ).then(() => {\n                            res(dbInfo);\n                        });\n                    });\n                }\n                else {\n                    MetaHelper.get(\n                        MetaHelper.dbSchema,\n                        this.util\n                    ).then((value: any) => {\n                        this.util.db = value;\n                        dbInfo.database = userDbSchema(this.db);\n                        res(dbInfo);\n                    });\n                }\n            }).catch(rej);\n        });\n    }\n}\n","import { QueryManager } from \"@/worker/query_manager\";\nimport { IS_WORKER } from \"./constants\";\nexport * from \"./query_manager\";\n\nif (IS_WORKER) {\n    const manager = new QueryManager();\n    (self as any).onmessage = function (e) {\n        manager.run(e.data);\n    };\n}\n\n"],"names":[],"sourceRoot":""}