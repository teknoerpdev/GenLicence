{"version":3,"file":"jsstore.js","mappings":"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","sources":["webpack://JsStore/webpack/bootstrap","webpack://JsStore/webpack/runtime/define property getters","webpack://JsStore/webpack/runtime/hasOwnProperty shorthand","webpack://JsStore/webpack/runtime/make namespace object","webpack://JsStore/./src/main/log_helper.ts","webpack://JsStore/./src/common/enums.ts","webpack://JsStore/./src/common/utils/promise.ts","webpack://JsStore/./src/common/utils/promise_resolve.ts","webpack://JsStore/./src/main/event_bus.ts","webpack://JsStore/./src/main/connection_helper.ts","webpack://JsStore/./src/main/connection.ts","webpack://JsStore/./src/common/utils/promise_all.ts","webpack://JsStore/./src/common/utils/for_obj.ts","webpack://JsStore/./src/common/utils/index.ts","webpack://JsStore/./src/common/index.ts","webpack://JsStore/./src/main/index.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","\nimport { ERROR_TYPE, IError } from \"../common/index\";\n\nexport class LogHelper implements IError {\n    type: string;\n    message: string;\n    private _info: any;\n    status: boolean;\n\n    constructor(type: string, info?) {\n        this.type = type;\n        this._info = info;\n        this.message = this.getMsg();\n    }\n\n    throw() {\n        throw this;\n    }\n\n    log(msg) {\n        if (this.status) {\n            console.log(msg);\n        }\n    }\n\n    logError() {\n        console.error(this.get());\n    }\n\n    logWarning() {\n        console.warn(this.get());\n    }\n\n    get() {\n        return {\n            message: this.message,\n            type: this.type\n        } as IError;\n    }\n\n    private getMsg() {\n        let errMsg: string;\n        switch (this.type) {\n            default:\n                errMsg = this.message;\n                break;\n        }\n        return errMsg;\n    }\n}","import { IErrorType } from \"./interfaces\";\n\nexport const ERROR_TYPE = {\n    InvalidUpdateColumn: \"invalid_update_column\",\n    UndefinedColumn: \"undefined_column\",\n    UndefinedValue: \"undefined_value\",\n    UndefinedColumnName: \"undefined_column_name\",\n    UndefinedDbName: \"undefined_database_name\",\n    UndefinedColumnValue: \"undefined_column_value\",\n    NotArray: \"not_array\",\n    NoValueSupplied: \"no_value_supplied\",\n    ColumnNotExist: \"column_not_exist\",\n    NoIndexFound: \"no_index_found\",\n    InvalidOp: \"invalid_operator\",\n    NullValue: \"null_value\",\n    WrongDataType: \"wrong_data_type\",\n    TableNotExist: \"table_not_exist\",\n    DbNotExist: \"db_not_exist\",\n    ConnectionAborted: \"connection_aborted\",\n    ConnectionClosed: \"connection_closed\",\n    NotObject: \"not_object\",\n    InvalidConfig: \"invalid_config\",\n    DbBlocked: \"Db_blocked\",\n    IndexedDbNotSupported: \"indexeddb_not_supported\",\n    NullValueInWhere: \"null_value_in_where\",\n    InvalidJoinQuery: 'invalid_join_query',\n    InvalidQuery: 'invalid_query',\n    ImportScriptsFailed: 'import_scripts_failed',\n    MethodNotExist: 'method_not_exist',\n    Unknown: \"unknown\",\n    InvalidMiddleware: \"invalid_middleware\"\n} as IErrorType;\n\nif (process.env.NODE_ENV !== 'production') {\n    Object.assign(ERROR_TYPE, {\n        InvalidOrderQuery: 'invalid_order_query',\n        InvalidGroupQuery: 'invalid_group_query'\n    });\n}\n\nexport enum WORKER_STATUS {\n    Registered = \"registerd\",\n    Failed = \"failed\",\n    NotStarted = \"not_started\"\n}\n\nexport enum DATA_TYPE {\n    String = \"string\",\n    Object = \"object\",\n    Array = \"array\",\n    Number = \"number\",\n    Boolean = \"boolean\",\n    Null = \"null\",\n    DateTime = \"date_time\"\n}\n\nexport enum API {\n    InitDb = \"init_db\",\n    Get = \"get\",\n    Set = \"set\",\n    Select = \"select\",\n    Insert = \"insert\",\n    Update = \"update\",\n    Remove = \"remove\",\n    OpenDb = \"open_db\",\n    Clear = \"clear\",\n    DropDb = \"drop_db\",\n    Count = \"count\",\n    ChangeLogStatus = \"change_log_status\",\n    Terminate = \"terminate\",\n    Transaction = \"transaction\",\n    CloseDb = \"close_db\",\n    Union = \"union\",\n    Intersect = \"intersect\",\n    ImportScripts = \"import_scripts\",\n    Middleware = \"middleware\"\n}\n\nexport enum EVENT {\n    RequestQueueEmpty = \"requestQueueEmpty\",\n    RequestQueueFilled = \"requestQueueFilled\",\n    Upgrade = \"upgrade\",\n    Create = \"create\",\n    Open = \"open\"\n}\n\nexport enum QUERY_OPTION {\n    Where = \"where\",\n    Like = 'like',\n    Regex = 'regex',\n    In = 'in',\n    Equal = \"=\",\n    Between = '-',\n    GreaterThan = '>',\n    LessThan = '<',\n    GreaterThanEqualTo = \">=\",\n    LessThanEqualTo = \"<=\",\n    NotEqualTo = \"!=\",\n    Aggregate = \"aggregate\",\n    Max = \"max\",\n    Min = \"min\",\n    Avg = \"avg\",\n    Count = \"count\",\n    Sum = \"sum\",\n    List = \"list\",\n    Or = \"or\",\n    Skip = \"skip\",\n    Limit = \"limit\",\n    And = \"and\",\n    IgnoreCase = \"ignoreCase\",\n    Then = \"then\"\n}\n\nexport enum IDB_MODE {\n    ReadOnly = \"readonly\",\n    ReadWrite = \"readwrite\"\n}\n\nexport enum OCCURENCE {\n    First = 'f',\n    Last = 'l',\n    Any = 'a'\n}\n\nexport enum CONNECTION_STATUS {\n    Connected = \"connected\",\n    Closed = \"closed\",\n    NotStarted = \"not_started\",\n    UnableToStart = \"unable_to_start\",\n    ClosedByJsStore = \"closed_by_jsstore\"\n}","export const promise = <T>(cb: (res, rej?) => any) => {\n    return new Promise<T>(cb);\n}","export const promiseResolve = (value?) => {\n    return Promise.resolve(value);\n}","export class EventBus {\n\n    constructor(ctx?) {\n        this._ctx = ctx;\n    }\n\n    private _ctx;\n\n    private _events: {\n        [key: string]: Function[]\n    } = {};\n\n    on(event: string, cb: Function) {\n        if (this._events[event] == null) {\n            this._events[event] = [];\n        }\n        this._events[event].push(cb);\n        return this;\n    }\n\n    off(event: string, cb: Function) {\n        if (this._events[event]) {\n            if (cb) {\n                const index = this._events[event].indexOf(cb);\n                this._events[event].splice(index, 1);\n            }\n            else {\n                this._events[event] = [];\n            }\n        }\n    }\n\n    emit(event: string, ...args) {\n        const events = this._events[event] || [];\n        let index = 0;\n        const length = events.length;\n        const results = [];\n        const callMethod = () => {\n            const eventCb = events[index++];\n            if (eventCb) {\n                const result = eventCb.call(this._ctx, ...args);\n                return result && result.then ? result : Promise.resolve(result);\n            }\n        };\n\n        return new Promise<any[]>((res) => {\n            const checkAndCall = () => {\n                if (index < length) {\n                    callMethod().then(result => {\n                        results.push(result);\n                        checkAndCall();\n                    });\n                }\n                else {\n                    res(results);\n                }\n            };\n            checkAndCall();\n        });\n\n    }\n\n    destroy() {\n        this._events = null;\n        this._ctx = null;\n    }\n}","import { LogHelper } from \"./log_helper\";\nimport {\n  WebWorkerRequest, EventQueue, API, WebWorkerResult,\n  EVENT, promise, IDataBase, IDbInfo, TMiddleware,\n  promiseResolve\n} from \"../common\";\nimport { EventBus } from \"./event_bus\";\n\ndeclare var JsStoreWorker;\nexport class ConnectionHelper {\n  protected database: IDataBase;\n  private worker_: Worker;\n  private isConOpened_ = false;\n  private isDbIdle_ = true;\n  private requestQueue_: WebWorkerRequest[] = [];\n  private isCodeExecuting_ = false;\n\n  private inactivityTimer_ = -1000;\n\n  protected middlewares: TMiddleware[] = [];\n\n  protected eventBus_: EventBus = new EventBus(this);\n\n  // these apis have special permissions. These apis dont wait for database open.\n  private whiteListApi_ = [\n    API.InitDb,\n    API.OpenDb,\n    API.Get,\n    API.Set,\n    API.ChangeLogStatus,\n    API.Terminate,\n    API.DropDb\n  ];\n\n  private queryManager;\n\n  isWorker = true;\n\n  protected logger = new LogHelper(null);\n\n  /**\n   * injected by jsstore worker plugin\n   *\n   * @private\n   * @memberof ConnectionHelper\n   */\n  private $worker;\n\n  private get jsstoreWorker() {\n    return this.$worker || self['JsStoreWorker'];\n  }\n\n  constructor(worker?: Worker) {\n    if (worker) {\n      this.worker_ = worker;\n      this.worker_.onmessage = this.onMessageFromWorker_.bind(this);\n    } else {\n      this.isWorker = false;\n      this.initQueryManager_();\n    }\n  }\n\n  private initQueryManager_() {\n    const workerRef = this.jsstoreWorker;\n    if (workerRef) {\n      this.queryManager = new workerRef.QueryManager(this.processFinishedQuery_.bind(this));\n    }\n  }\n\n  private onMessageFromWorker_(msg) {\n    this.processFinishedQuery_(msg.data);\n  }\n\n  private processFinishedQuery_(message: WebWorkerResult) {\n\n    const finishedRequest: WebWorkerRequest = this.requestQueue_.shift();\n    if (finishedRequest) {\n      this.logger.log(`request ${finishedRequest.name} finished`);\n      if (message.error) {\n        finishedRequest.onError(message.error);\n      } else {\n        switch (finishedRequest.name) {\n          case API.OpenDb:\n          case API.InitDb:\n            this.isConOpened_ = true; break;\n          case API.Terminate:\n            this.isConOpened_ = false;\n            if (this.isWorker === true) {\n              this.worker_.terminate();\n            }\n          case API.DropDb:\n            this.isConOpened_ = false;\n            this.requestQueue_ = [];\n            this.isDbIdle_ = true;\n            break;\n          case API.CloseDb:\n            if (this.requestQueue_.length > 0) {\n              this.openDb_();\n            }\n            else {\n              this.isDbIdle_ = true;\n              this.eventBus_.emit(EVENT.RequestQueueEmpty, []);\n            }\n            break;\n        }\n        finishedRequest.onSuccess(message.result);\n      }\n      this.isCodeExecuting_ = false;\n      this.executeQry_();\n    }\n  }\n\n  private openDb_() {\n    this.prcoessExecutionOfQry_({\n      name: API.OpenDb,\n      query: {\n        name: this.database.name,\n        version: this.database.version\n      } as IDbInfo,\n      onSuccess: function () {\n\n      },\n      onError: function (err) {\n        console.error(err);\n      }\n    }, 0);\n  }\n\n  private executeMiddleware_(input: WebWorkerRequest) {\n    return promise<void>((res) => {\n      let index = 0;\n      const lastIndex = this.middlewares.length - 1;\n      const callNextMiddleware = () => {\n        if (index <= lastIndex) {\n          let promiseResult = this.middlewares[index++](input);\n          if (!promiseResult || !promiseResult.then) {\n            promiseResult = promiseResolve(promiseResult);\n          }\n          promiseResult.then(_ => {\n            callNextMiddleware();\n          });\n        }\n        else {\n          res();\n        }\n      };\n      callNextMiddleware();\n    });\n  }\n\n  private callResultMiddleware(middlewares: any[], result) {\n    return promise<any>((res) => {\n      let index = 0;\n      const lastIndex = middlewares.length - 1;\n      const callNextMiddleware = () => {\n        if (index <= lastIndex) {\n          let promiseResult = middlewares[index++](result);\n          if (!promiseResult.then) {\n            promiseResult = promiseResolve(promiseResult);\n          }\n          promiseResult.then(modifiedResult => {\n            result = modifiedResult;\n            callNextMiddleware();\n          });\n        }\n        else {\n          res(result);\n        }\n      };\n      callNextMiddleware();\n    });\n  }\n\n  protected pushApi<T>(request: WebWorkerRequest): Promise<T> {\n    if (process.env.NODE_ENV !== 'production' && !this.jsstoreWorker && !this.worker_) {\n      throw new Error(`JsStoreWorker not found. Either pass web worker or inject JsStore Worker.`);\n    }\n    return new Promise((resolve, reject) => {\n      let middlewares = [];\n      request.onResult = (cb) => {\n        middlewares.push((result) => {\n          return cb(result);\n        });\n      };\n      this.executeMiddleware_(request).then(() => {\n        request.onSuccess = (result) => {\n          this.callResultMiddleware(middlewares, result).then(modifiedResult => {\n            resolve(modifiedResult);\n          }).catch(err => {\n            request.onError(err);\n          });\n        };\n        request.onError = (err) => {\n          middlewares = [];\n          reject(err);\n        };\n        if (this.requestQueue_.length === 0) {\n          this.eventBus_.emit(EVENT.RequestQueueFilled, []);\n          const isConnectionApi = [API.CloseDb, API.DropDb, API.OpenDb, API.Terminate].indexOf(request.name) >= 0;\n          if (!isConnectionApi && this.isDbIdle_ && this.isConOpened_) {\n            this.openDb_();\n          }\n          else {\n            clearTimeout(this.inactivityTimer_);\n          }\n        }\n        this.prcoessExecutionOfQry_(request);\n      }).catch(reject);\n    });\n  }\n\n  private prcoessExecutionOfQry_(request: WebWorkerRequest, index?: number) {\n    this.isDbIdle_ = false;\n    if (index != null) {\n      this.requestQueue_.splice(index, 0, request);\n    }\n    else {\n      this.requestQueue_.push(request);\n    }\n    this.logger.log(\"request pushed: \" + request.name);\n    this.executeQry_();\n  }\n\n  private executeQry_() {\n    const requestQueueLength = this.requestQueue_.length;\n    if (!this.isCodeExecuting_ && requestQueueLength > 0) {\n      if (this.isConOpened_ === true) {\n        this.sendRequestToWorker_(this.requestQueue_[0]);\n        return;\n      }\n\n      const allowedQueryIndex = this.requestQueue_.findIndex(\n        item => this.whiteListApi_.indexOf(item.name) >= 0\n      );\n\n      // shift allowed query to zeroth index\n      if (allowedQueryIndex >= 0) {\n        this.requestQueue_.splice(\n          0,\n          0,\n          this.requestQueue_.splice(allowedQueryIndex, 1)[0]\n        );\n        this.sendRequestToWorker_(this.requestQueue_[0]);\n      }\n    }\n    else if (requestQueueLength === 0 && this.isDbIdle_ === false && this.isConOpened_) {\n      this.inactivityTimer_ = setTimeout(() => {\n        this.prcoessExecutionOfQry_({\n          name: API.CloseDb,\n          onSuccess: function () {\n\n          },\n          onError: function (err) {\n            console.error(err);\n          }\n        });\n      }, 100) as any;\n    }\n  }\n\n  private sendRequestToWorker_(request: WebWorkerRequest) {\n    this.isCodeExecuting_ = true;\n    this.logger.log(\"request executing: \" + request.name);\n    const requestForWorker = {\n      name: request.name,\n      query: request.query\n    } as WebWorkerRequest;\n    if (this.isWorker === true) {\n      this.worker_.postMessage(requestForWorker);\n    }\n    else {\n      this.queryManager.run(requestForWorker);\n    }\n  }\n}\n","import { ConnectionHelper } from \"./connection_helper\";\nimport {\n    ISelectQuery, ICountQuery, IInsertQuery, SetQuery,\n    IUpdateQuery, IRemoveQuery, ITranscationQuery,\n    API, IDataBase, EVENT, IPlugin, IIntersectQuery, IDbInfo, TMiddleware, promiseResolve, InitDbResult\n} from \"../common\";\n\nexport class Connection extends ConnectionHelper {\n\n    constructor(worker?: Worker) {\n        super(worker);\n    }\n\n    /**\n     * initiate DataBase\n     *\n     * @param {IDataBase} dataBase\n     * @returns\n     * @memberof Connection\n     */\n    initDb(dataBase: IDataBase) {\n        this.database = dataBase;\n        return this.pushApi({\n            name: API.InitDb,\n            query: dataBase\n        }).then((result: InitDbResult) => {\n            let promiseObj: Promise<any>;\n            const db = result.database;\n            if (result.isCreated) {\n                if (result.oldVersion) {\n                    promiseObj = this.eventBus_.emit(EVENT.Upgrade, db, result.oldVersion, result.newVersion);\n                }\n                else {\n                    promiseObj = this.eventBus_.emit(EVENT.Create, db);\n                }\n            }\n            return (promiseObj || promiseResolve()).then(_ => {\n                return this.eventBus_.emit(EVENT.Open, db);\n            }).then(_ => {\n                return result.isCreated;\n            });\n        });\n    }\n\n    /**\n     * drop dataBase\n     *\n     * @returns\n     * @memberof Connection\n     */\n    dropDb() {\n        return this.pushApi<void>({\n            name: API.DropDb\n        });\n    }\n\n    /**\n     * select data from table\n     *\n     * @template T\n     * @param {ISelectQuery} query\n     * @returns\n     * @memberof Connection\n     */\n    select<T>(query: ISelectQuery) {\n        return this.pushApi<T[]>({\n            name: API.Select,\n            query: query\n        });\n    }\n\n    /**\n     * get no of record from table\n     *\n     * @param {ICountQuery} query\n     * @returns\n     * @memberof Connection\n     */\n    count(query: ICountQuery) {\n        return this.pushApi<number>({\n            name: API.Count,\n            query: query\n        });\n    }\n\n    /**\n     * insert data into table\n     *\n     * @template T\n     * @param {IInsertQuery} query\n     * @returns\n     * @memberof Connection\n     */\n    insert<T>(query: IInsertQuery) {\n        return this.pushApi<number | T[]>({\n            name: API.Insert,\n            query: query\n        });\n    }\n\n    /**\n     * update data into table\n     *\n     * @param {IUpdateQuery} query\n     * @returns\n     * @memberof Connection\n     */\n    update(query: IUpdateQuery) {\n        return this.pushApi<number>({\n            name: API.Update,\n            query: query\n        });\n    }\n\n    /**\n     * remove data from table\n     *\n     * @param {IRemoveQuery} query\n     * @returns\n     * @memberof Connection\n     */\n    remove(query: IRemoveQuery) {\n        return this.pushApi<number>({\n            name: API.Remove,\n            query: query\n        });\n    }\n\n    /**\n     * delete all data from table\n     *\n     * @param {string} tableName\n     * @returns\n     * @memberof Connection\n     */\n    clear(tableName: string) {\n        return this.pushApi<void>({\n            name: API.Clear,\n            query: tableName\n        });\n    }\n\n    /**\n     * set log status\n     *\n     * @param {boolean} status\n     * @memberof Connection\n     */\n    set logStatus(status: boolean) {\n        this.logger.status = status;\n        this.pushApi({\n            name: API.ChangeLogStatus,\n            query: status\n        });\n    }\n\n    /**\n     * open database\n     *\n     * @param {string} dbName\n     * @returns\n     * @memberof Connection\n     */\n    openDb(dbName: string, version?) {\n        return this.pushApi<IDataBase>({\n            name: API.OpenDb,\n            query: {\n                version: version,\n                name: dbName\n            } as IDbInfo\n        }).then((dataBase) => {\n            this.database = dataBase;\n            return dataBase;\n        });\n    }\n\n    /**\n     * returns list of database created\n     *\n     * @returns\n     * @memberof Connection\n     */\n    getDbList(): Promise<[IDbInfo]> {\n        console.warn(\"Api getDbList is recommended to use for debugging only. Do not use in code.\");\n        return (indexedDB as any).databases();\n    }\n\n    /**\n     * get the value from keystore table\n     *\n     * @template T\n     * @param {string} key\n     * @returns\n     * @memberof Connection\n     */\n    get<T>(key: string) {\n        return this.pushApi<T>({\n            name: API.Get,\n            query: key\n        });\n    }\n\n    /**\n     * set the value in keystore table \n     *\n     * @param {string} key\n     * @param {*} value\n     * @returns\n     * @memberof Connection\n     */\n    set(key: string, value: any) {\n        return this.pushApi<void>({\n            name: API.Set,\n            query: {\n                key: key, value: value\n            } as SetQuery\n        });\n    }\n\n    /**\n     * terminate the connection\n     *\n     * @returns\n     * @memberof Connection\n     */\n    terminate() {\n        return this.pushApi<void>({\n            name: API.Terminate\n        });\n    }\n\n    /**\n     * execute transaction\n     *\n     * @template T\n     * @param {ITranscationQuery} query\n     * @returns\n     * @memberof Connection\n     */\n    transaction<T>(query: ITranscationQuery) {\n        return this.pushApi<T>({\n            name: API.Transaction,\n            query: query\n        });\n    }\n\n    on(event: EVENT, eventCallBack: Function) {\n        this.eventBus_.on(event, eventCallBack);\n    }\n\n    off(event: EVENT, eventCallBack: Function) {\n        this.eventBus_.off(event, eventCallBack);\n    }\n\n    union<T>(query: ISelectQuery[]) {\n        return this.pushApi<T>({\n            name: API.Union,\n            query\n        });\n    }\n\n    intersect<T>(query: IIntersectQuery) {\n        return this.pushApi<T>({\n            name: API.Intersect,\n            query\n        });\n    }\n\n    addPlugin(plugin: IPlugin, params?) {\n        return plugin.setup(this, params);\n    }\n\n    addMiddleware(middleware: TMiddleware | string, forWorker: boolean) {\n        if (forWorker) {\n            return this.pushApi({\n                name: API.Middleware,\n                query: middleware\n            });\n        }\n        this.middlewares.push(middleware as TMiddleware);\n        return Promise.resolve();\n    }\n\n    /**\n     * import scripts in jsstore web worker. \n     * Scripts method can be called using transaction api.\n     * \n     * @param {...string[]} urls\n     * @returns\n     * @memberof Connection\n     */\n    importScripts(...urls: string[]) {\n        return this.pushApi<void>({\n            name: API.ImportScripts,\n            query: urls\n        });\n    }\n}","export const promiseAll = <T>(promises: any) => {\n    return Promise.all<T>(promises);\n};","export const forObj = (obj: object, cb: (key, value) => void) => {\n    for (const key in obj) {\n        cb(key, obj[key]);\n    }\n}","export * from \"./promise\";\nexport * from \"./promise_all\";\nexport * from \"./promise_resolve\";\nexport * from \"./for_obj\";","export * from './enums';\nexport * from './interfaces';\nexport * from './types';\nexport * from './utils';\n","export * from './connection';\nexport * from '../common';"],"names":[],"sourceRoot":""}